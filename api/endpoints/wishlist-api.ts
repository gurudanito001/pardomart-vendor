/* tslint:disable */
/* eslint-disable */
/**
 * PardoMart Node API
 * API documentation for the PardoMart Node.js application.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pardomart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateWishlistItemPayload } from '../models';
// @ts-ignore
import type { WishlistItem } from '../models';
// @ts-ignore
import type { WishlistItemWithRelations } from '../models';
/**
 * WishlistApi - axios parameter creator
 */
export const WishlistApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the user\'s wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishlistGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/wishlist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove an item from the wishlist
         * @param {string} id The ID of the wishlist item to remove.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishlistIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('wishlistIdDelete', 'id', id)
            const localVarPath = `/wishlist/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a product to the wishlist
         * @param {CreateWishlistItemPayload} createWishlistItemPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishlistPost: async (createWishlistItemPayload: CreateWishlistItemPayload, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createWishlistItemPayload' is not null or undefined
            assertParamExists('wishlistPost', 'createWishlistItemPayload', createWishlistItemPayload)
            const localVarPath = `/wishlist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createWishlistItemPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WishlistApi - functional programming interface
 */
export const WishlistApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WishlistApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the user\'s wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wishlistGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WishlistItemWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wishlistGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WishlistApi.wishlistGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove an item from the wishlist
         * @param {string} id The ID of the wishlist item to remove.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wishlistIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WishlistItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wishlistIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WishlistApi.wishlistIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add a product to the wishlist
         * @param {CreateWishlistItemPayload} createWishlistItemPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wishlistPost(createWishlistItemPayload: CreateWishlistItemPayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WishlistItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wishlistPost(createWishlistItemPayload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WishlistApi.wishlistPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WishlistApi - factory interface
 */
export const WishlistApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WishlistApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the user\'s wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishlistGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<WishlistItemWithRelations>> {
            return localVarFp.wishlistGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove an item from the wishlist
         * @param {string} id The ID of the wishlist item to remove.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishlistIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<WishlistItem> {
            return localVarFp.wishlistIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add a product to the wishlist
         * @param {CreateWishlistItemPayload} createWishlistItemPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishlistPost(createWishlistItemPayload: CreateWishlistItemPayload, options?: RawAxiosRequestConfig): AxiosPromise<WishlistItem> {
            return localVarFp.wishlistPost(createWishlistItemPayload, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WishlistApi - object-oriented interface
 */
export class WishlistApi extends BaseAPI {
    /**
     * 
     * @summary Get the user\'s wishlist
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public wishlistGet(options?: RawAxiosRequestConfig) {
        return WishlistApiFp(this.configuration).wishlistGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove an item from the wishlist
     * @param {string} id The ID of the wishlist item to remove.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public wishlistIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return WishlistApiFp(this.configuration).wishlistIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add a product to the wishlist
     * @param {CreateWishlistItemPayload} createWishlistItemPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public wishlistPost(createWishlistItemPayload: CreateWishlistItemPayload, options?: RawAxiosRequestConfig) {
        return WishlistApiFp(this.configuration).wishlistPost(createWishlistItemPayload, options).then((request) => request(this.axios, this.basePath));
    }
}

