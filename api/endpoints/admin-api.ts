/* tslint:disable */
/* eslint-disable */
/**
 * PardoMart Node API
 * API documentation for the PardoMart Node.js application.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pardomart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { BugReportsIdStatusPatchRequest } from '../models';
// @ts-ignore
import type { PaginatedSupportTickets } from '../models';
// @ts-ignore
import type { SupportTicket } from '../models';
// @ts-ignore
import type { UpdateSupportTicketStatusPayload } from '../models';
/**
 * AdminApi - axios parameter creator
 */
export const AdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a paginated list of all support tickets. Requires admin privileges.
         * @summary Get all support tickets (Admin)
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SupportTicketsGet: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/support/tickets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the status of a specific support ticket. Requires admin privileges.
         * @summary Update a support ticket\'s status (Admin)
         * @param {UpdateSupportTicketStatusPayload} updateSupportTicketStatusPayload 
         * @param {string} ticketId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SupportTicketsTicketIdStatusPatch: async (updateSupportTicketStatusPayload: UpdateSupportTicketStatusPayload, ticketId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateSupportTicketStatusPayload' is not null or undefined
            assertParamExists('apiV1SupportTicketsTicketIdStatusPatch', 'updateSupportTicketStatusPayload', updateSupportTicketStatusPayload)
            // verify required parameter 'ticketId' is not null or undefined
            assertParamExists('apiV1SupportTicketsTicketIdStatusPatch', 'ticketId', ticketId)
            const localVarPath = `/api/v1/support/tickets/{ticketId}/status`
                .replace(`{${"ticketId"}}`, encodeURIComponent(String(ticketId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSupportTicketStatusPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a bug report\'s status (Admin only)
         * @param {BugReportsIdStatusPatchRequest} bugReportsIdStatusPatchRequest 
         * @param {string} id The ID of the bug report to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bugReportsIdStatusPatch: async (bugReportsIdStatusPatchRequest: BugReportsIdStatusPatchRequest, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bugReportsIdStatusPatchRequest' is not null or undefined
            assertParamExists('bugReportsIdStatusPatch', 'bugReportsIdStatusPatchRequest', bugReportsIdStatusPatchRequest)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('bugReportsIdStatusPatch', 'id', id)
            const localVarPath = `/bug-reports/{id}/status`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bugReportsIdStatusPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminApi - functional programming interface
 */
export const AdminApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a paginated list of all support tickets. Requires admin privileges.
         * @summary Get all support tickets (Admin)
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SupportTicketsGet(page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedSupportTickets>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SupportTicketsGet(page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.apiV1SupportTicketsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the status of a specific support ticket. Requires admin privileges.
         * @summary Update a support ticket\'s status (Admin)
         * @param {UpdateSupportTicketStatusPayload} updateSupportTicketStatusPayload 
         * @param {string} ticketId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SupportTicketsTicketIdStatusPatch(updateSupportTicketStatusPayload: UpdateSupportTicketStatusPayload, ticketId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupportTicket>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SupportTicketsTicketIdStatusPatch(updateSupportTicketStatusPayload, ticketId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.apiV1SupportTicketsTicketIdStatusPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a bug report\'s status (Admin only)
         * @param {BugReportsIdStatusPatchRequest} bugReportsIdStatusPatchRequest 
         * @param {string} id The ID of the bug report to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bugReportsIdStatusPatch(bugReportsIdStatusPatchRequest: BugReportsIdStatusPatchRequest, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bugReportsIdStatusPatch(bugReportsIdStatusPatchRequest, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.bugReportsIdStatusPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AdminApi - factory interface
 */
export const AdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminApiFp(configuration)
    return {
        /**
         * Retrieves a paginated list of all support tickets. Requires admin privileges.
         * @summary Get all support tickets (Admin)
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SupportTicketsGet(page?: number, size?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedSupportTickets> {
            return localVarFp.apiV1SupportTicketsGet(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the status of a specific support ticket. Requires admin privileges.
         * @summary Update a support ticket\'s status (Admin)
         * @param {UpdateSupportTicketStatusPayload} updateSupportTicketStatusPayload 
         * @param {string} ticketId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SupportTicketsTicketIdStatusPatch(updateSupportTicketStatusPayload: UpdateSupportTicketStatusPayload, ticketId: string, options?: RawAxiosRequestConfig): AxiosPromise<SupportTicket> {
            return localVarFp.apiV1SupportTicketsTicketIdStatusPatch(updateSupportTicketStatusPayload, ticketId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a bug report\'s status (Admin only)
         * @param {BugReportsIdStatusPatchRequest} bugReportsIdStatusPatchRequest 
         * @param {string} id The ID of the bug report to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bugReportsIdStatusPatch(bugReportsIdStatusPatchRequest: BugReportsIdStatusPatchRequest, id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.bugReportsIdStatusPatch(bugReportsIdStatusPatchRequest, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminApi - object-oriented interface
 */
export class AdminApi extends BaseAPI {
    /**
     * Retrieves a paginated list of all support tickets. Requires admin privileges.
     * @summary Get all support tickets (Admin)
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1SupportTicketsGet(page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).apiV1SupportTicketsGet(page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the status of a specific support ticket. Requires admin privileges.
     * @summary Update a support ticket\'s status (Admin)
     * @param {UpdateSupportTicketStatusPayload} updateSupportTicketStatusPayload 
     * @param {string} ticketId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1SupportTicketsTicketIdStatusPatch(updateSupportTicketStatusPayload: UpdateSupportTicketStatusPayload, ticketId: string, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).apiV1SupportTicketsTicketIdStatusPatch(updateSupportTicketStatusPayload, ticketId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a bug report\'s status (Admin only)
     * @param {BugReportsIdStatusPatchRequest} bugReportsIdStatusPatchRequest 
     * @param {string} id The ID of the bug report to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public bugReportsIdStatusPatch(bugReportsIdStatusPatchRequest: BugReportsIdStatusPatchRequest, id: string, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).bugReportsIdStatusPatch(bugReportsIdStatusPatchRequest, id, options).then((request) => request(this.axios, this.basePath));
    }
}

