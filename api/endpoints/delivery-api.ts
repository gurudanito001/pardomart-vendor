/* tslint:disable */
/* eslint-disable */
/**
 * PardoMart Node API
 * API documentation for the PardoMart Node.js application.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pardomart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { DeliveryPersonLocation } from '../models';
// @ts-ignore
import type { OrdersOrderIdDeliveryLocationPostRequest } from '../models';
/**
 * DeliveryApi - axios parameter creator
 */
export const DeliveryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Logs the current geographic coordinates of the delivery person for a specific order. This should be called periodically by the delivery person\'s application. Only the assigned delivery person for the order can post a location.
         * @summary Add a location point for a delivery person
         * @param {OrdersOrderIdDeliveryLocationPostRequest} ordersOrderIdDeliveryLocationPostRequest 
         * @param {string} orderId The ID of the order being delivered.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersOrderIdDeliveryLocationPost: async (ordersOrderIdDeliveryLocationPostRequest: OrdersOrderIdDeliveryLocationPostRequest, orderId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ordersOrderIdDeliveryLocationPostRequest' is not null or undefined
            assertParamExists('ordersOrderIdDeliveryLocationPost', 'ordersOrderIdDeliveryLocationPostRequest', ordersOrderIdDeliveryLocationPostRequest)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('ordersOrderIdDeliveryLocationPost', 'orderId', orderId)
            const localVarPath = `/orders/{orderId}/delivery-location`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ordersOrderIdDeliveryLocationPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the historical path of the delivery person for a specific order. This can be used to display the route on a map. Accessible by the customer who placed the order, the assigned delivery person, or an admin.
         * @summary Get the delivery path for an order
         * @param {string} orderId The ID of the order to retrieve the path for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersOrderIdDeliveryPathGet: async (orderId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('ordersOrderIdDeliveryPathGet', 'orderId', orderId)
            const localVarPath = `/orders/{orderId}/delivery-path`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeliveryApi - functional programming interface
 */
export const DeliveryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeliveryApiAxiosParamCreator(configuration)
    return {
        /**
         * Logs the current geographic coordinates of the delivery person for a specific order. This should be called periodically by the delivery person\'s application. Only the assigned delivery person for the order can post a location.
         * @summary Add a location point for a delivery person
         * @param {OrdersOrderIdDeliveryLocationPostRequest} ordersOrderIdDeliveryLocationPostRequest 
         * @param {string} orderId The ID of the order being delivered.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersOrderIdDeliveryLocationPost(ordersOrderIdDeliveryLocationPostRequest: OrdersOrderIdDeliveryLocationPostRequest, orderId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeliveryPersonLocation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersOrderIdDeliveryLocationPost(ordersOrderIdDeliveryLocationPostRequest, orderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DeliveryApi.ordersOrderIdDeliveryLocationPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves the historical path of the delivery person for a specific order. This can be used to display the route on a map. Accessible by the customer who placed the order, the assigned delivery person, or an admin.
         * @summary Get the delivery path for an order
         * @param {string} orderId The ID of the order to retrieve the path for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersOrderIdDeliveryPathGet(orderId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeliveryPersonLocation>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersOrderIdDeliveryPathGet(orderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DeliveryApi.ordersOrderIdDeliveryPathGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DeliveryApi - factory interface
 */
export const DeliveryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeliveryApiFp(configuration)
    return {
        /**
         * Logs the current geographic coordinates of the delivery person for a specific order. This should be called periodically by the delivery person\'s application. Only the assigned delivery person for the order can post a location.
         * @summary Add a location point for a delivery person
         * @param {OrdersOrderIdDeliveryLocationPostRequest} ordersOrderIdDeliveryLocationPostRequest 
         * @param {string} orderId The ID of the order being delivered.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersOrderIdDeliveryLocationPost(ordersOrderIdDeliveryLocationPostRequest: OrdersOrderIdDeliveryLocationPostRequest, orderId: string, options?: RawAxiosRequestConfig): AxiosPromise<DeliveryPersonLocation> {
            return localVarFp.ordersOrderIdDeliveryLocationPost(ordersOrderIdDeliveryLocationPostRequest, orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the historical path of the delivery person for a specific order. This can be used to display the route on a map. Accessible by the customer who placed the order, the assigned delivery person, or an admin.
         * @summary Get the delivery path for an order
         * @param {string} orderId The ID of the order to retrieve the path for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersOrderIdDeliveryPathGet(orderId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<DeliveryPersonLocation>> {
            return localVarFp.ordersOrderIdDeliveryPathGet(orderId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeliveryApi - object-oriented interface
 */
export class DeliveryApi extends BaseAPI {
    /**
     * Logs the current geographic coordinates of the delivery person for a specific order. This should be called periodically by the delivery person\'s application. Only the assigned delivery person for the order can post a location.
     * @summary Add a location point for a delivery person
     * @param {OrdersOrderIdDeliveryLocationPostRequest} ordersOrderIdDeliveryLocationPostRequest 
     * @param {string} orderId The ID of the order being delivered.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public ordersOrderIdDeliveryLocationPost(ordersOrderIdDeliveryLocationPostRequest: OrdersOrderIdDeliveryLocationPostRequest, orderId: string, options?: RawAxiosRequestConfig) {
        return DeliveryApiFp(this.configuration).ordersOrderIdDeliveryLocationPost(ordersOrderIdDeliveryLocationPostRequest, orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the historical path of the delivery person for a specific order. This can be used to display the route on a map. Accessible by the customer who placed the order, the assigned delivery person, or an admin.
     * @summary Get the delivery path for an order
     * @param {string} orderId The ID of the order to retrieve the path for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public ordersOrderIdDeliveryPathGet(orderId: string, options?: RawAxiosRequestConfig) {
        return DeliveryApiFp(this.configuration).ordersOrderIdDeliveryPathGet(orderId, options).then((request) => request(this.axios, this.basePath));
    }
}

