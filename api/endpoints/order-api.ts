/* tslint:disable */
/* eslint-disable */
/**
 * PardoMart Node API
 * API documentation for the PardoMart Node.js application.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pardomart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiV1OrderOrderIdMessagesPostRequest } from '../models';
// @ts-ignore
import type { ApiV1OrderOrderIdMessagesReadPatch200Response } from '../models';
// @ts-ignore
import type { CalculateFeesPayload } from '../models';
// @ts-ignore
import type { CalculateFeesResponse } from '../models';
// @ts-ignore
import type { CreateOrderClientPayload } from '../models';
// @ts-ignore
import type { DeclineOrderPayload } from '../models';
// @ts-ignore
import type { DeliveryMethod } from '../models';
// @ts-ignore
import type { DeliveryPersonLocation } from '../models';
// @ts-ignore
import type { DeliverySlot } from '../models';
// @ts-ignore
import type { MessageWithRelations } from '../models';
// @ts-ignore
import type { Order } from '../models';
// @ts-ignore
import type { OrderItemWithRelations } from '../models';
// @ts-ignore
import type { OrderStatus } from '../models';
// @ts-ignore
import type { OrdersOrderIdDeliveryLocationPostRequest } from '../models';
// @ts-ignore
import type { RespondToReplacementPayload } from '../models';
// @ts-ignore
import type { UpdateOrderItemShoppingStatusPayload } from '../models';
// @ts-ignore
import type { UpdateOrderPayload } from '../models';
// @ts-ignore
import type { UpdateOrderStatusPayload } from '../models';
// @ts-ignore
import type { UpdateTipPayload } from '../models';
// @ts-ignore
import type { VendorOrder } from '../models';
/**
 * OrderApi - axios parameter creator
 */
export const OrderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the conversation history for a specific order. The user must be a participant in the order (customer, shopper, or delivery person).
         * @summary Get messages for an order
         * @param {string} orderId The ID of the order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrderOrderIdMessagesGet: async (orderId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('apiV1OrderOrderIdMessagesGet', 'orderId', orderId)
            const localVarPath = `/api/v1/order/{orderId}/messages`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends a message from the authenticated user to another participant (customer, shopper, or delivery person) of the order.
         * @summary Send a message related to an order
         * @param {ApiV1OrderOrderIdMessagesPostRequest} apiV1OrderOrderIdMessagesPostRequest 
         * @param {string} orderId The ID of the order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrderOrderIdMessagesPost: async (apiV1OrderOrderIdMessagesPostRequest: ApiV1OrderOrderIdMessagesPostRequest, orderId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1OrderOrderIdMessagesPostRequest' is not null or undefined
            assertParamExists('apiV1OrderOrderIdMessagesPost', 'apiV1OrderOrderIdMessagesPostRequest', apiV1OrderOrderIdMessagesPostRequest)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('apiV1OrderOrderIdMessagesPost', 'orderId', orderId)
            const localVarPath = `/api/v1/order/{orderId}/messages`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1OrderOrderIdMessagesPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks all unread messages for the authenticated user within a specific order as read. This is typically called when the user opens the chat screen.
         * @summary Mark messages as read
         * @param {string} orderId The ID of the order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrderOrderIdMessagesReadPatch: async (orderId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('apiV1OrderOrderIdMessagesReadPatch', 'orderId', orderId)
            const localVarPath = `/api/v1/order/{orderId}/messages/read`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Calculate the total estimated cost for an order
         * @param {CalculateFeesPayload} calculateFeesPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feesCalculateFeesPost: async (calculateFeesPayload: CalculateFeesPayload, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'calculateFeesPayload' is not null or undefined
            assertParamExists('feesCalculateFeesPost', 'calculateFeesPayload', calculateFeesPayload)
            const localVarPath = `/fees/calculate-fees`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(calculateFeesPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get available delivery time slots
         * @param {string} vendorId The ID of the vendor.
         * @param {DeliveryMethod} deliveryMethod The delivery method for the order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderDeliverySlotsGet: async (vendorId: string, deliveryMethod: DeliveryMethod, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vendorId' is not null or undefined
            assertParamExists('orderDeliverySlotsGet', 'vendorId', vendorId)
            // verify required parameter 'deliveryMethod' is not null or undefined
            assertParamExists('orderDeliverySlotsGet', 'deliveryMethod', deliveryMethod)
            const localVarPath = `/order/delivery-slots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (vendorId !== undefined) {
                localVarQueryParameter['vendorId'] = vendorId;
            }

            if (deliveryMethod !== undefined) {
                localVarQueryParameter['deliveryMethod'] = deliveryMethod;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an order by its ID
         * @param {string} id The ID of the order to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderIdGet', 'id', id)
            const localVarPath = `/order/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an order
         * @param {UpdateOrderPayload} updateOrderPayload 
         * @param {string} id The ID of the order to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderIdPatch: async (updateOrderPayload: UpdateOrderPayload, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateOrderPayload' is not null or undefined
            assertParamExists('orderIdPatch', 'updateOrderPayload', updateOrderPayload)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderIdPatch', 'id', id)
            const localVarPath = `/order/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateOrderPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update the status of an order
         * @param {UpdateOrderStatusPayload} updateOrderStatusPayload 
         * @param {string} id The ID of the order to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderIdStatusPatch: async (updateOrderStatusPayload: UpdateOrderStatusPayload, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateOrderStatusPayload' is not null or undefined
            assertParamExists('orderIdStatusPatch', 'updateOrderStatusPayload', updateOrderStatusPayload)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderIdStatusPatch', 'id', id)
            const localVarPath = `/order/{id}/status`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateOrderStatusPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Accept a pending order
         * @param {string} orderId The ID of the order to accept.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderOrderIdAcceptPatch: async (orderId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('orderOrderIdAcceptPatch', 'orderId', orderId)
            const localVarPath = `/order/{orderId}/accept`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Decline a pending order
         * @param {string} orderId The ID of the order to decline.
         * @param {DeclineOrderPayload} [declineOrderPayload] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderOrderIdDeclinePatch: async (orderId: string, declineOrderPayload?: DeclineOrderPayload, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('orderOrderIdDeclinePatch', 'orderId', orderId)
            const localVarPath = `/order/{orderId}/decline`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(declineOrderPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows a customer to approve or reject a replacement suggested by the shopper.
         * @summary Respond to a suggested item replacement
         * @param {RespondToReplacementPayload} respondToReplacementPayload 
         * @param {string} orderId 
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderOrderIdItemsItemIdRespondToReplacementPatch: async (respondToReplacementPayload: RespondToReplacementPayload, orderId: string, itemId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'respondToReplacementPayload' is not null or undefined
            assertParamExists('orderOrderIdItemsItemIdRespondToReplacementPatch', 'respondToReplacementPayload', respondToReplacementPayload)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('orderOrderIdItemsItemIdRespondToReplacementPatch', 'orderId', orderId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('orderOrderIdItemsItemIdRespondToReplacementPatch', 'itemId', itemId)
            const localVarPath = `/order/{orderId}/items/{itemId}/respond-to-replacement`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(respondToReplacementPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows the assigned shopper or delivery person to update an item\'s status during shopping (e.g., found, not found, suggest replacement).
         * @summary Update the shopping status of an order item
         * @param {UpdateOrderItemShoppingStatusPayload} updateOrderItemShoppingStatusPayload 
         * @param {string} orderId 
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderOrderIdItemsItemIdUpdateShoppingStatusPatch: async (updateOrderItemShoppingStatusPayload: UpdateOrderItemShoppingStatusPayload, orderId: string, itemId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateOrderItemShoppingStatusPayload' is not null or undefined
            assertParamExists('orderOrderIdItemsItemIdUpdateShoppingStatusPatch', 'updateOrderItemShoppingStatusPayload', updateOrderItemShoppingStatusPayload)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('orderOrderIdItemsItemIdUpdateShoppingStatusPatch', 'orderId', orderId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('orderOrderIdItemsItemIdUpdateShoppingStatusPatch', 'itemId', itemId)
            const localVarPath = `/order/{orderId}/items/{itemId}/update-shopping-status`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateOrderItemShoppingStatusPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Mark an order as \'currently shopping\'
         * @param {string} orderId The ID of the order to start shopping for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderOrderIdStartShoppingPatch: async (orderId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('orderOrderIdStartShoppingPatch', 'orderId', orderId)
            const localVarPath = `/order/{orderId}/start-shopping`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows a customer to add or update tips for the shopper and/or delivery person after an order has been placed. This will recalculate the order\'s total amount.
         * @summary Add or update a tip for an order
         * @param {UpdateTipPayload} updateTipPayload 
         * @param {string} orderId The ID of the order to add a tip to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderOrderIdTipPatch: async (updateTipPayload: UpdateTipPayload, orderId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateTipPayload' is not null or undefined
            assertParamExists('orderOrderIdTipPatch', 'updateTipPayload', updateTipPayload)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('orderOrderIdTipPatch', 'orderId', orderId)
            const localVarPath = `/order/{orderId}/tip`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTipPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new order based on a payload sent from the client, which includes all order items and delivery details. This endpoint is used when the cart state is managed on the client-side.
         * @summary Create an order from a client payload
         * @param {CreateOrderClientPayload} createOrderClientPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderPost: async (createOrderClientPayload: CreateOrderClientPayload, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createOrderClientPayload' is not null or undefined
            assertParamExists('orderPost', 'createOrderClientPayload', createOrderClientPayload)
            const localVarPath = `/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createOrderClientPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all orders for the authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderUserMeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/order/user/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get orders for a vendor\'s dashboard
         * @param {OrderStatus} [status] Optional. Filter orders by a specific status.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderVendorOrdersGet: async (status?: OrderStatus, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/order/vendorOrders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Logs the current geographic coordinates of the delivery person for a specific order. This should be called periodically by the delivery person\'s application. Only the assigned delivery person for the order can post a location.
         * @summary Add a location point for a delivery person
         * @param {OrdersOrderIdDeliveryLocationPostRequest} ordersOrderIdDeliveryLocationPostRequest 
         * @param {string} orderId The ID of the order being delivered.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersOrderIdDeliveryLocationPost: async (ordersOrderIdDeliveryLocationPostRequest: OrdersOrderIdDeliveryLocationPostRequest, orderId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ordersOrderIdDeliveryLocationPostRequest' is not null or undefined
            assertParamExists('ordersOrderIdDeliveryLocationPost', 'ordersOrderIdDeliveryLocationPostRequest', ordersOrderIdDeliveryLocationPostRequest)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('ordersOrderIdDeliveryLocationPost', 'orderId', orderId)
            const localVarPath = `/orders/{orderId}/delivery-location`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ordersOrderIdDeliveryLocationPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the historical path of the delivery person for a specific order. This can be used to display the route on a map. Accessible by the customer who placed the order, the assigned delivery person, or an admin.
         * @summary Get the delivery path for an order
         * @param {string} orderId The ID of the order to retrieve the path for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersOrderIdDeliveryPathGet: async (orderId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('ordersOrderIdDeliveryPathGet', 'orderId', orderId)
            const localVarPath = `/orders/{orderId}/delivery-path`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderApi - functional programming interface
 */
export const OrderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the conversation history for a specific order. The user must be a participant in the order (customer, shopper, or delivery person).
         * @summary Get messages for an order
         * @param {string} orderId The ID of the order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrderOrderIdMessagesGet(orderId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MessageWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrderOrderIdMessagesGet(orderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.apiV1OrderOrderIdMessagesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Sends a message from the authenticated user to another participant (customer, shopper, or delivery person) of the order.
         * @summary Send a message related to an order
         * @param {ApiV1OrderOrderIdMessagesPostRequest} apiV1OrderOrderIdMessagesPostRequest 
         * @param {string} orderId The ID of the order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrderOrderIdMessagesPost(apiV1OrderOrderIdMessagesPostRequest: ApiV1OrderOrderIdMessagesPostRequest, orderId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrderOrderIdMessagesPost(apiV1OrderOrderIdMessagesPostRequest, orderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.apiV1OrderOrderIdMessagesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Marks all unread messages for the authenticated user within a specific order as read. This is typically called when the user opens the chat screen.
         * @summary Mark messages as read
         * @param {string} orderId The ID of the order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrderOrderIdMessagesReadPatch(orderId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1OrderOrderIdMessagesReadPatch200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrderOrderIdMessagesReadPatch(orderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.apiV1OrderOrderIdMessagesReadPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Calculate the total estimated cost for an order
         * @param {CalculateFeesPayload} calculateFeesPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feesCalculateFeesPost(calculateFeesPayload: CalculateFeesPayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CalculateFeesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feesCalculateFeesPost(calculateFeesPayload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.feesCalculateFeesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get available delivery time slots
         * @param {string} vendorId The ID of the vendor.
         * @param {DeliveryMethod} deliveryMethod The delivery method for the order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderDeliverySlotsGet(vendorId: string, deliveryMethod: DeliveryMethod, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeliverySlot>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderDeliverySlotsGet(vendorId, deliveryMethod, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderDeliverySlotsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get an order by its ID
         * @param {string} id The ID of the order to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VendorOrder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update an order
         * @param {UpdateOrderPayload} updateOrderPayload 
         * @param {string} id The ID of the order to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderIdPatch(updateOrderPayload: UpdateOrderPayload, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderIdPatch(updateOrderPayload, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update the status of an order
         * @param {UpdateOrderStatusPayload} updateOrderStatusPayload 
         * @param {string} id The ID of the order to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderIdStatusPatch(updateOrderStatusPayload: UpdateOrderStatusPayload, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderIdStatusPatch(updateOrderStatusPayload, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderIdStatusPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Accept a pending order
         * @param {string} orderId The ID of the order to accept.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderOrderIdAcceptPatch(orderId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderOrderIdAcceptPatch(orderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderOrderIdAcceptPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Decline a pending order
         * @param {string} orderId The ID of the order to decline.
         * @param {DeclineOrderPayload} [declineOrderPayload] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderOrderIdDeclinePatch(orderId: string, declineOrderPayload?: DeclineOrderPayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderOrderIdDeclinePatch(orderId, declineOrderPayload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderOrderIdDeclinePatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Allows a customer to approve or reject a replacement suggested by the shopper.
         * @summary Respond to a suggested item replacement
         * @param {RespondToReplacementPayload} respondToReplacementPayload 
         * @param {string} orderId 
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderOrderIdItemsItemIdRespondToReplacementPatch(respondToReplacementPayload: RespondToReplacementPayload, orderId: string, itemId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderItemWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderOrderIdItemsItemIdRespondToReplacementPatch(respondToReplacementPayload, orderId, itemId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderOrderIdItemsItemIdRespondToReplacementPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Allows the assigned shopper or delivery person to update an item\'s status during shopping (e.g., found, not found, suggest replacement).
         * @summary Update the shopping status of an order item
         * @param {UpdateOrderItemShoppingStatusPayload} updateOrderItemShoppingStatusPayload 
         * @param {string} orderId 
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderOrderIdItemsItemIdUpdateShoppingStatusPatch(updateOrderItemShoppingStatusPayload: UpdateOrderItemShoppingStatusPayload, orderId: string, itemId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderItemWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderOrderIdItemsItemIdUpdateShoppingStatusPatch(updateOrderItemShoppingStatusPayload, orderId, itemId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderOrderIdItemsItemIdUpdateShoppingStatusPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Mark an order as \'currently shopping\'
         * @param {string} orderId The ID of the order to start shopping for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderOrderIdStartShoppingPatch(orderId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderOrderIdStartShoppingPatch(orderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderOrderIdStartShoppingPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Allows a customer to add or update tips for the shopper and/or delivery person after an order has been placed. This will recalculate the order\'s total amount.
         * @summary Add or update a tip for an order
         * @param {UpdateTipPayload} updateTipPayload 
         * @param {string} orderId The ID of the order to add a tip to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderOrderIdTipPatch(updateTipPayload: UpdateTipPayload, orderId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderOrderIdTipPatch(updateTipPayload, orderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderOrderIdTipPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a new order based on a payload sent from the client, which includes all order items and delivery details. This endpoint is used when the cart state is managed on the client-side.
         * @summary Create an order from a client payload
         * @param {CreateOrderClientPayload} createOrderClientPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderPost(createOrderClientPayload: CreateOrderClientPayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VendorOrder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderPost(createOrderClientPayload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all orders for the authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderUserMeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VendorOrder>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderUserMeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderUserMeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get orders for a vendor\'s dashboard
         * @param {OrderStatus} [status] Optional. Filter orders by a specific status.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderVendorOrdersGet(status?: OrderStatus, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VendorOrder>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderVendorOrdersGet(status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderVendorOrdersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Logs the current geographic coordinates of the delivery person for a specific order. This should be called periodically by the delivery person\'s application. Only the assigned delivery person for the order can post a location.
         * @summary Add a location point for a delivery person
         * @param {OrdersOrderIdDeliveryLocationPostRequest} ordersOrderIdDeliveryLocationPostRequest 
         * @param {string} orderId The ID of the order being delivered.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersOrderIdDeliveryLocationPost(ordersOrderIdDeliveryLocationPostRequest: OrdersOrderIdDeliveryLocationPostRequest, orderId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeliveryPersonLocation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersOrderIdDeliveryLocationPost(ordersOrderIdDeliveryLocationPostRequest, orderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.ordersOrderIdDeliveryLocationPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves the historical path of the delivery person for a specific order. This can be used to display the route on a map. Accessible by the customer who placed the order, the assigned delivery person, or an admin.
         * @summary Get the delivery path for an order
         * @param {string} orderId The ID of the order to retrieve the path for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersOrderIdDeliveryPathGet(orderId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeliveryPersonLocation>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersOrderIdDeliveryPathGet(orderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.ordersOrderIdDeliveryPathGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrderApi - factory interface
 */
export const OrderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderApiFp(configuration)
    return {
        /**
         * Retrieves the conversation history for a specific order. The user must be a participant in the order (customer, shopper, or delivery person).
         * @summary Get messages for an order
         * @param {string} orderId The ID of the order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrderOrderIdMessagesGet(orderId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<MessageWithRelations>> {
            return localVarFp.apiV1OrderOrderIdMessagesGet(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends a message from the authenticated user to another participant (customer, shopper, or delivery person) of the order.
         * @summary Send a message related to an order
         * @param {ApiV1OrderOrderIdMessagesPostRequest} apiV1OrderOrderIdMessagesPostRequest 
         * @param {string} orderId The ID of the order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrderOrderIdMessagesPost(apiV1OrderOrderIdMessagesPostRequest: ApiV1OrderOrderIdMessagesPostRequest, orderId: string, options?: RawAxiosRequestConfig): AxiosPromise<MessageWithRelations> {
            return localVarFp.apiV1OrderOrderIdMessagesPost(apiV1OrderOrderIdMessagesPostRequest, orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Marks all unread messages for the authenticated user within a specific order as read. This is typically called when the user opens the chat screen.
         * @summary Mark messages as read
         * @param {string} orderId The ID of the order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrderOrderIdMessagesReadPatch(orderId: string, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1OrderOrderIdMessagesReadPatch200Response> {
            return localVarFp.apiV1OrderOrderIdMessagesReadPatch(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Calculate the total estimated cost for an order
         * @param {CalculateFeesPayload} calculateFeesPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feesCalculateFeesPost(calculateFeesPayload: CalculateFeesPayload, options?: RawAxiosRequestConfig): AxiosPromise<CalculateFeesResponse> {
            return localVarFp.feesCalculateFeesPost(calculateFeesPayload, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get available delivery time slots
         * @param {string} vendorId The ID of the vendor.
         * @param {DeliveryMethod} deliveryMethod The delivery method for the order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderDeliverySlotsGet(vendorId: string, deliveryMethod: DeliveryMethod, options?: RawAxiosRequestConfig): AxiosPromise<Array<DeliverySlot>> {
            return localVarFp.orderDeliverySlotsGet(vendorId, deliveryMethod, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an order by its ID
         * @param {string} id The ID of the order to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<VendorOrder> {
            return localVarFp.orderIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an order
         * @param {UpdateOrderPayload} updateOrderPayload 
         * @param {string} id The ID of the order to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderIdPatch(updateOrderPayload: UpdateOrderPayload, id: string, options?: RawAxiosRequestConfig): AxiosPromise<Order> {
            return localVarFp.orderIdPatch(updateOrderPayload, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update the status of an order
         * @param {UpdateOrderStatusPayload} updateOrderStatusPayload 
         * @param {string} id The ID of the order to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderIdStatusPatch(updateOrderStatusPayload: UpdateOrderStatusPayload, id: string, options?: RawAxiosRequestConfig): AxiosPromise<Order> {
            return localVarFp.orderIdStatusPatch(updateOrderStatusPayload, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Accept a pending order
         * @param {string} orderId The ID of the order to accept.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderOrderIdAcceptPatch(orderId: string, options?: RawAxiosRequestConfig): AxiosPromise<Order> {
            return localVarFp.orderOrderIdAcceptPatch(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Decline a pending order
         * @param {string} orderId The ID of the order to decline.
         * @param {DeclineOrderPayload} [declineOrderPayload] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderOrderIdDeclinePatch(orderId: string, declineOrderPayload?: DeclineOrderPayload, options?: RawAxiosRequestConfig): AxiosPromise<Order> {
            return localVarFp.orderOrderIdDeclinePatch(orderId, declineOrderPayload, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows a customer to approve or reject a replacement suggested by the shopper.
         * @summary Respond to a suggested item replacement
         * @param {RespondToReplacementPayload} respondToReplacementPayload 
         * @param {string} orderId 
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderOrderIdItemsItemIdRespondToReplacementPatch(respondToReplacementPayload: RespondToReplacementPayload, orderId: string, itemId: string, options?: RawAxiosRequestConfig): AxiosPromise<OrderItemWithRelations> {
            return localVarFp.orderOrderIdItemsItemIdRespondToReplacementPatch(respondToReplacementPayload, orderId, itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows the assigned shopper or delivery person to update an item\'s status during shopping (e.g., found, not found, suggest replacement).
         * @summary Update the shopping status of an order item
         * @param {UpdateOrderItemShoppingStatusPayload} updateOrderItemShoppingStatusPayload 
         * @param {string} orderId 
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderOrderIdItemsItemIdUpdateShoppingStatusPatch(updateOrderItemShoppingStatusPayload: UpdateOrderItemShoppingStatusPayload, orderId: string, itemId: string, options?: RawAxiosRequestConfig): AxiosPromise<OrderItemWithRelations> {
            return localVarFp.orderOrderIdItemsItemIdUpdateShoppingStatusPatch(updateOrderItemShoppingStatusPayload, orderId, itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Mark an order as \'currently shopping\'
         * @param {string} orderId The ID of the order to start shopping for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderOrderIdStartShoppingPatch(orderId: string, options?: RawAxiosRequestConfig): AxiosPromise<Order> {
            return localVarFp.orderOrderIdStartShoppingPatch(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows a customer to add or update tips for the shopper and/or delivery person after an order has been placed. This will recalculate the order\'s total amount.
         * @summary Add or update a tip for an order
         * @param {UpdateTipPayload} updateTipPayload 
         * @param {string} orderId The ID of the order to add a tip to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderOrderIdTipPatch(updateTipPayload: UpdateTipPayload, orderId: string, options?: RawAxiosRequestConfig): AxiosPromise<Order> {
            return localVarFp.orderOrderIdTipPatch(updateTipPayload, orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new order based on a payload sent from the client, which includes all order items and delivery details. This endpoint is used when the cart state is managed on the client-side.
         * @summary Create an order from a client payload
         * @param {CreateOrderClientPayload} createOrderClientPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderPost(createOrderClientPayload: CreateOrderClientPayload, options?: RawAxiosRequestConfig): AxiosPromise<VendorOrder> {
            return localVarFp.orderPost(createOrderClientPayload, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all orders for the authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderUserMeGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<VendorOrder>> {
            return localVarFp.orderUserMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get orders for a vendor\'s dashboard
         * @param {OrderStatus} [status] Optional. Filter orders by a specific status.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderVendorOrdersGet(status?: OrderStatus, options?: RawAxiosRequestConfig): AxiosPromise<Array<VendorOrder>> {
            return localVarFp.orderVendorOrdersGet(status, options).then((request) => request(axios, basePath));
        },
        /**
         * Logs the current geographic coordinates of the delivery person for a specific order. This should be called periodically by the delivery person\'s application. Only the assigned delivery person for the order can post a location.
         * @summary Add a location point for a delivery person
         * @param {OrdersOrderIdDeliveryLocationPostRequest} ordersOrderIdDeliveryLocationPostRequest 
         * @param {string} orderId The ID of the order being delivered.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersOrderIdDeliveryLocationPost(ordersOrderIdDeliveryLocationPostRequest: OrdersOrderIdDeliveryLocationPostRequest, orderId: string, options?: RawAxiosRequestConfig): AxiosPromise<DeliveryPersonLocation> {
            return localVarFp.ordersOrderIdDeliveryLocationPost(ordersOrderIdDeliveryLocationPostRequest, orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the historical path of the delivery person for a specific order. This can be used to display the route on a map. Accessible by the customer who placed the order, the assigned delivery person, or an admin.
         * @summary Get the delivery path for an order
         * @param {string} orderId The ID of the order to retrieve the path for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersOrderIdDeliveryPathGet(orderId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<DeliveryPersonLocation>> {
            return localVarFp.ordersOrderIdDeliveryPathGet(orderId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrderApi - object-oriented interface
 */
export class OrderApi extends BaseAPI {
    /**
     * Retrieves the conversation history for a specific order. The user must be a participant in the order (customer, shopper, or delivery person).
     * @summary Get messages for an order
     * @param {string} orderId The ID of the order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1OrderOrderIdMessagesGet(orderId: string, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).apiV1OrderOrderIdMessagesGet(orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends a message from the authenticated user to another participant (customer, shopper, or delivery person) of the order.
     * @summary Send a message related to an order
     * @param {ApiV1OrderOrderIdMessagesPostRequest} apiV1OrderOrderIdMessagesPostRequest 
     * @param {string} orderId The ID of the order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1OrderOrderIdMessagesPost(apiV1OrderOrderIdMessagesPostRequest: ApiV1OrderOrderIdMessagesPostRequest, orderId: string, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).apiV1OrderOrderIdMessagesPost(apiV1OrderOrderIdMessagesPostRequest, orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Marks all unread messages for the authenticated user within a specific order as read. This is typically called when the user opens the chat screen.
     * @summary Mark messages as read
     * @param {string} orderId The ID of the order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1OrderOrderIdMessagesReadPatch(orderId: string, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).apiV1OrderOrderIdMessagesReadPatch(orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Calculate the total estimated cost for an order
     * @param {CalculateFeesPayload} calculateFeesPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public feesCalculateFeesPost(calculateFeesPayload: CalculateFeesPayload, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).feesCalculateFeesPost(calculateFeesPayload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get available delivery time slots
     * @param {string} vendorId The ID of the vendor.
     * @param {DeliveryMethod} deliveryMethod The delivery method for the order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderDeliverySlotsGet(vendorId: string, deliveryMethod: DeliveryMethod, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderDeliverySlotsGet(vendorId, deliveryMethod, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an order by its ID
     * @param {string} id The ID of the order to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderIdGet(id: string, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an order
     * @param {UpdateOrderPayload} updateOrderPayload 
     * @param {string} id The ID of the order to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderIdPatch(updateOrderPayload: UpdateOrderPayload, id: string, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderIdPatch(updateOrderPayload, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update the status of an order
     * @param {UpdateOrderStatusPayload} updateOrderStatusPayload 
     * @param {string} id The ID of the order to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderIdStatusPatch(updateOrderStatusPayload: UpdateOrderStatusPayload, id: string, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderIdStatusPatch(updateOrderStatusPayload, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Accept a pending order
     * @param {string} orderId The ID of the order to accept.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderOrderIdAcceptPatch(orderId: string, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderOrderIdAcceptPatch(orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Decline a pending order
     * @param {string} orderId The ID of the order to decline.
     * @param {DeclineOrderPayload} [declineOrderPayload] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderOrderIdDeclinePatch(orderId: string, declineOrderPayload?: DeclineOrderPayload, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderOrderIdDeclinePatch(orderId, declineOrderPayload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows a customer to approve or reject a replacement suggested by the shopper.
     * @summary Respond to a suggested item replacement
     * @param {RespondToReplacementPayload} respondToReplacementPayload 
     * @param {string} orderId 
     * @param {string} itemId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderOrderIdItemsItemIdRespondToReplacementPatch(respondToReplacementPayload: RespondToReplacementPayload, orderId: string, itemId: string, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderOrderIdItemsItemIdRespondToReplacementPatch(respondToReplacementPayload, orderId, itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows the assigned shopper or delivery person to update an item\'s status during shopping (e.g., found, not found, suggest replacement).
     * @summary Update the shopping status of an order item
     * @param {UpdateOrderItemShoppingStatusPayload} updateOrderItemShoppingStatusPayload 
     * @param {string} orderId 
     * @param {string} itemId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderOrderIdItemsItemIdUpdateShoppingStatusPatch(updateOrderItemShoppingStatusPayload: UpdateOrderItemShoppingStatusPayload, orderId: string, itemId: string, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderOrderIdItemsItemIdUpdateShoppingStatusPatch(updateOrderItemShoppingStatusPayload, orderId, itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Mark an order as \'currently shopping\'
     * @param {string} orderId The ID of the order to start shopping for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderOrderIdStartShoppingPatch(orderId: string, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderOrderIdStartShoppingPatch(orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows a customer to add or update tips for the shopper and/or delivery person after an order has been placed. This will recalculate the order\'s total amount.
     * @summary Add or update a tip for an order
     * @param {UpdateTipPayload} updateTipPayload 
     * @param {string} orderId The ID of the order to add a tip to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderOrderIdTipPatch(updateTipPayload: UpdateTipPayload, orderId: string, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderOrderIdTipPatch(updateTipPayload, orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new order based on a payload sent from the client, which includes all order items and delivery details. This endpoint is used when the cart state is managed on the client-side.
     * @summary Create an order from a client payload
     * @param {CreateOrderClientPayload} createOrderClientPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderPost(createOrderClientPayload: CreateOrderClientPayload, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderPost(createOrderClientPayload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all orders for the authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderUserMeGet(options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderUserMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get orders for a vendor\'s dashboard
     * @param {OrderStatus} [status] Optional. Filter orders by a specific status.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderVendorOrdersGet(status?: OrderStatus, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderVendorOrdersGet(status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Logs the current geographic coordinates of the delivery person for a specific order. This should be called periodically by the delivery person\'s application. Only the assigned delivery person for the order can post a location.
     * @summary Add a location point for a delivery person
     * @param {OrdersOrderIdDeliveryLocationPostRequest} ordersOrderIdDeliveryLocationPostRequest 
     * @param {string} orderId The ID of the order being delivered.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public ordersOrderIdDeliveryLocationPost(ordersOrderIdDeliveryLocationPostRequest: OrdersOrderIdDeliveryLocationPostRequest, orderId: string, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).ordersOrderIdDeliveryLocationPost(ordersOrderIdDeliveryLocationPostRequest, orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the historical path of the delivery person for a specific order. This can be used to display the route on a map. Accessible by the customer who placed the order, the assigned delivery person, or an admin.
     * @summary Get the delivery path for an order
     * @param {string} orderId The ID of the order to retrieve the path for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public ordersOrderIdDeliveryPathGet(orderId: string, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).ordersOrderIdDeliveryPathGet(orderId, options).then((request) => request(this.axios, this.basePath));
    }
}

