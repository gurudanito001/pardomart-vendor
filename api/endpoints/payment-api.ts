/* tslint:disable */
/* eslint-disable */
/**
 * PardoMart Node API
 * API documentation for the PardoMart Node.js application.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pardomart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiV1PaymentsCreatePaymentIntentPost200Response } from '../models';
// @ts-ignore
import type { ApiV1PaymentsCreatePaymentIntentPostRequest } from '../models';
// @ts-ignore
import type { Payment } from '../models';
// @ts-ignore
import type { SavedPaymentMethod } from '../models';
/**
 * PaymentApi - axios parameter creator
 */
export const PaymentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a Payment Intent for an order
         * @param {ApiV1PaymentsCreatePaymentIntentPostRequest} apiV1PaymentsCreatePaymentIntentPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PaymentsCreatePaymentIntentPost: async (apiV1PaymentsCreatePaymentIntentPostRequest: ApiV1PaymentsCreatePaymentIntentPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1PaymentsCreatePaymentIntentPostRequest' is not null or undefined
            assertParamExists('apiV1PaymentsCreatePaymentIntentPost', 'apiV1PaymentsCreatePaymentIntentPostRequest', apiV1PaymentsCreatePaymentIntentPostRequest)
            const localVarPath = `/api/v1/payments/create-payment-intent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PaymentsCreatePaymentIntentPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get my payment history
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PaymentsMeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/payments/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get my saved payment methods
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PaymentsMePaymentMethodsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/payments/me/payment-methods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a saved payment method
         * @param {string} paymentMethodId The Stripe PaymentMethod ID (pm_...).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PaymentsMePaymentMethodsPaymentMethodIdDelete: async (paymentMethodId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentMethodId' is not null or undefined
            assertParamExists('apiV1PaymentsMePaymentMethodsPaymentMethodIdDelete', 'paymentMethodId', paymentMethodId)
            const localVarPath = `/api/v1/payments/me/payment-methods/{paymentMethodId}`
                .replace(`{${"paymentMethodId"}}`, encodeURIComponent(String(paymentMethodId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Setup Intent to be used on the client-side for saving a new card for future use.
         * @summary Create a Setup Intent to save a new payment method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PaymentsSetupIntentPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/payments/setup-intent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentApi - functional programming interface
 */
export const PaymentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a Payment Intent for an order
         * @param {ApiV1PaymentsCreatePaymentIntentPostRequest} apiV1PaymentsCreatePaymentIntentPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PaymentsCreatePaymentIntentPost(apiV1PaymentsCreatePaymentIntentPostRequest: ApiV1PaymentsCreatePaymentIntentPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PaymentsCreatePaymentIntentPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PaymentsCreatePaymentIntentPost(apiV1PaymentsCreatePaymentIntentPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentApi.apiV1PaymentsCreatePaymentIntentPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get my payment history
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PaymentsMeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Payment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PaymentsMeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentApi.apiV1PaymentsMeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get my saved payment methods
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PaymentsMePaymentMethodsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SavedPaymentMethod>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PaymentsMePaymentMethodsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentApi.apiV1PaymentsMePaymentMethodsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a saved payment method
         * @param {string} paymentMethodId The Stripe PaymentMethod ID (pm_...).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PaymentsMePaymentMethodsPaymentMethodIdDelete(paymentMethodId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PaymentsMePaymentMethodsPaymentMethodIdDelete(paymentMethodId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentApi.apiV1PaymentsMePaymentMethodsPaymentMethodIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a Setup Intent to be used on the client-side for saving a new card for future use.
         * @summary Create a Setup Intent to save a new payment method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PaymentsSetupIntentPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PaymentsCreatePaymentIntentPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PaymentsSetupIntentPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentApi.apiV1PaymentsSetupIntentPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PaymentApi - factory interface
 */
export const PaymentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a Payment Intent for an order
         * @param {ApiV1PaymentsCreatePaymentIntentPostRequest} apiV1PaymentsCreatePaymentIntentPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PaymentsCreatePaymentIntentPost(apiV1PaymentsCreatePaymentIntentPostRequest: ApiV1PaymentsCreatePaymentIntentPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PaymentsCreatePaymentIntentPost200Response> {
            return localVarFp.apiV1PaymentsCreatePaymentIntentPost(apiV1PaymentsCreatePaymentIntentPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get my payment history
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PaymentsMeGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Payment>> {
            return localVarFp.apiV1PaymentsMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get my saved payment methods
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PaymentsMePaymentMethodsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<SavedPaymentMethod>> {
            return localVarFp.apiV1PaymentsMePaymentMethodsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a saved payment method
         * @param {string} paymentMethodId The Stripe PaymentMethod ID (pm_...).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PaymentsMePaymentMethodsPaymentMethodIdDelete(paymentMethodId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1PaymentsMePaymentMethodsPaymentMethodIdDelete(paymentMethodId, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Setup Intent to be used on the client-side for saving a new card for future use.
         * @summary Create a Setup Intent to save a new payment method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PaymentsSetupIntentPost(options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PaymentsCreatePaymentIntentPost200Response> {
            return localVarFp.apiV1PaymentsSetupIntentPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PaymentApi - object-oriented interface
 */
export class PaymentApi extends BaseAPI {
    /**
     * 
     * @summary Create a Payment Intent for an order
     * @param {ApiV1PaymentsCreatePaymentIntentPostRequest} apiV1PaymentsCreatePaymentIntentPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1PaymentsCreatePaymentIntentPost(apiV1PaymentsCreatePaymentIntentPostRequest: ApiV1PaymentsCreatePaymentIntentPostRequest, options?: RawAxiosRequestConfig) {
        return PaymentApiFp(this.configuration).apiV1PaymentsCreatePaymentIntentPost(apiV1PaymentsCreatePaymentIntentPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get my payment history
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1PaymentsMeGet(options?: RawAxiosRequestConfig) {
        return PaymentApiFp(this.configuration).apiV1PaymentsMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get my saved payment methods
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1PaymentsMePaymentMethodsGet(options?: RawAxiosRequestConfig) {
        return PaymentApiFp(this.configuration).apiV1PaymentsMePaymentMethodsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a saved payment method
     * @param {string} paymentMethodId The Stripe PaymentMethod ID (pm_...).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1PaymentsMePaymentMethodsPaymentMethodIdDelete(paymentMethodId: string, options?: RawAxiosRequestConfig) {
        return PaymentApiFp(this.configuration).apiV1PaymentsMePaymentMethodsPaymentMethodIdDelete(paymentMethodId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Setup Intent to be used on the client-side for saving a new card for future use.
     * @summary Create a Setup Intent to save a new payment method
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1PaymentsSetupIntentPost(options?: RawAxiosRequestConfig) {
        return PaymentApiFp(this.configuration).apiV1PaymentsSetupIntentPost(options).then((request) => request(this.axios, this.basePath));
    }
}

