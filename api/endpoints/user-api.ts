/* tslint:disable */
/* eslint-disable */
/**
 * PardoMart Node API
 * API documentation for the PardoMart Node.js application.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pardomart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Device } from '../models';
// @ts-ignore
import type { DevicesPostRequest } from '../models';
// @ts-ignore
import type { PaginatedUsers } from '../models';
// @ts-ignore
import type { Role } from '../models';
// @ts-ignore
import type { UpdateUserPayload } from '../models';
// @ts-ignore
import type { User } from '../models';
// @ts-ignore
import type { VendorProduct } from '../models';
// @ts-ignore
import type { Verification } from '../models';
/**
 * UserApi - axios parameter creator
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Unregister a device for push notifications
         * @param {string} fcmToken The FCM token of the device to unregister.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesFcmTokenDelete: async (fcmToken: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fcmToken' is not null or undefined
            assertParamExists('devicesFcmTokenDelete', 'fcmToken', fcmToken)
            const localVarPath = `/devices/{fcmToken}`
                .replace(`{${"fcmToken"}}`, encodeURIComponent(String(fcmToken)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register a device for push notifications
         * @param {DevicesPostRequest} devicesPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesPost: async (devicesPostRequest: DevicesPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'devicesPostRequest' is not null or undefined
            assertParamExists('devicesPost', 'devicesPostRequest', devicesPostRequest)
            const localVarPath = `/devices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(devicesPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all vendor-specific products from all stores owned by a particular user. This can be used by an admin or the user themselves.
         * @summary Get all products from all vendors belonging to a user
         * @param {string} userId The ID of the user whose vendor products are to be fetched.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productUserUserIdGet: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('productUserUserIdGet', 'userId', userId)
            const localVarPath = `/product/user/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a paginated list of users
         * @param {boolean} [mobileVerified] Filter by mobile verification status.
         * @param {boolean} [active] Filter by active status.
         * @param {Role} [role] Filter by user role.
         * @param {string} [language] Filter by language.
         * @param {number} [page] Page number for pagination.
         * @param {number} [size] Number of items per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet: async (mobileVerified?: boolean, active?: boolean, role?: Role, language?: string, page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (mobileVerified !== undefined) {
                localVarQueryParameter['mobileVerified'] = mobileVerified;
            }

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }

            if (role !== undefined) {
                localVarQueryParameter['role'] = role;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a user
         * @param {string} id The ID of the user to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdDelete', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a user by their ID
         * @param {string} id The ID of the user to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdGet', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a user\'s details
         * @param {UpdateUserPayload} updateUserPayload 
         * @param {string} id The ID of the user to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdPut: async (updateUserPayload: UpdateUserPayload, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateUserPayload' is not null or undefined
            assertParamExists('usersIdPut', 'updateUserPayload', updateUserPayload)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdPut', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all stored verification codes. Intended for admin/debugging purposes.
         * @summary Get all verification codes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersVerificationCodesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/verificationCodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Unregister a device for push notifications
         * @param {string} fcmToken The FCM token of the device to unregister.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesFcmTokenDelete(fcmToken: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesFcmTokenDelete(fcmToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.devicesFcmTokenDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Register a device for push notifications
         * @param {DevicesPostRequest} devicesPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesPost(devicesPostRequest: DevicesPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Device>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesPost(devicesPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.devicesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of all vendor-specific products from all stores owned by a particular user. This can be used by an admin or the user themselves.
         * @summary Get all products from all vendors belonging to a user
         * @param {string} userId The ID of the user whose vendor products are to be fetched.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productUserUserIdGet(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VendorProduct>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productUserUserIdGet(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.productUserUserIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a paginated list of users
         * @param {boolean} [mobileVerified] Filter by mobile verification status.
         * @param {boolean} [active] Filter by active status.
         * @param {Role} [role] Filter by user role.
         * @param {string} [language] Filter by language.
         * @param {number} [page] Page number for pagination.
         * @param {number} [size] Number of items per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersGet(mobileVerified?: boolean, active?: boolean, role?: Role, language?: string, page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedUsers>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersGet(mobileVerified, active, role, language, page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.usersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a user
         * @param {string} id The ID of the user to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.usersIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a user by their ID
         * @param {string} id The ID of the user to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.usersIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a user\'s details
         * @param {UpdateUserPayload} updateUserPayload 
         * @param {string} id The ID of the user to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdPut(updateUserPayload: UpdateUserPayload, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdPut(updateUserPayload, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.usersIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves all stored verification codes. Intended for admin/debugging purposes.
         * @summary Get all verification codes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersVerificationCodesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Verification>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersVerificationCodesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.usersVerificationCodesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary Unregister a device for push notifications
         * @param {string} fcmToken The FCM token of the device to unregister.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesFcmTokenDelete(fcmToken: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.devicesFcmTokenDelete(fcmToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register a device for push notifications
         * @param {DevicesPostRequest} devicesPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesPost(devicesPostRequest: DevicesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Device> {
            return localVarFp.devicesPost(devicesPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of all vendor-specific products from all stores owned by a particular user. This can be used by an admin or the user themselves.
         * @summary Get all products from all vendors belonging to a user
         * @param {string} userId The ID of the user whose vendor products are to be fetched.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productUserUserIdGet(userId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<VendorProduct>> {
            return localVarFp.productUserUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a paginated list of users
         * @param {boolean} [mobileVerified] Filter by mobile verification status.
         * @param {boolean} [active] Filter by active status.
         * @param {Role} [role] Filter by user role.
         * @param {string} [language] Filter by language.
         * @param {number} [page] Page number for pagination.
         * @param {number} [size] Number of items per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet(mobileVerified?: boolean, active?: boolean, role?: Role, language?: string, page?: number, size?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedUsers> {
            return localVarFp.usersGet(mobileVerified, active, role, language, page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a user
         * @param {string} id The ID of the user to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.usersIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a user by their ID
         * @param {string} id The ID of the user to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.usersIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a user\'s details
         * @param {UpdateUserPayload} updateUserPayload 
         * @param {string} id The ID of the user to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdPut(updateUserPayload: UpdateUserPayload, id: string, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.usersIdPut(updateUserPayload, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all stored verification codes. Intended for admin/debugging purposes.
         * @summary Get all verification codes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersVerificationCodesGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Verification>> {
            return localVarFp.usersVerificationCodesGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary Unregister a device for push notifications
     * @param {string} fcmToken The FCM token of the device to unregister.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public devicesFcmTokenDelete(fcmToken: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).devicesFcmTokenDelete(fcmToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register a device for push notifications
     * @param {DevicesPostRequest} devicesPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public devicesPost(devicesPostRequest: DevicesPostRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).devicesPost(devicesPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of all vendor-specific products from all stores owned by a particular user. This can be used by an admin or the user themselves.
     * @summary Get all products from all vendors belonging to a user
     * @param {string} userId The ID of the user whose vendor products are to be fetched.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public productUserUserIdGet(userId: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).productUserUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a paginated list of users
     * @param {boolean} [mobileVerified] Filter by mobile verification status.
     * @param {boolean} [active] Filter by active status.
     * @param {Role} [role] Filter by user role.
     * @param {string} [language] Filter by language.
     * @param {number} [page] Page number for pagination.
     * @param {number} [size] Number of items per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public usersGet(mobileVerified?: boolean, active?: boolean, role?: Role, language?: string, page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).usersGet(mobileVerified, active, role, language, page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a user
     * @param {string} id The ID of the user to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public usersIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).usersIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a user by their ID
     * @param {string} id The ID of the user to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public usersIdGet(id: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).usersIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a user\'s details
     * @param {UpdateUserPayload} updateUserPayload 
     * @param {string} id The ID of the user to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public usersIdPut(updateUserPayload: UpdateUserPayload, id: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).usersIdPut(updateUserPayload, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all stored verification codes. Intended for admin/debugging purposes.
     * @summary Get all verification codes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public usersVerificationCodesGet(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).usersVerificationCodesGet(options).then((request) => request(this.axios, this.basePath));
    }
}

