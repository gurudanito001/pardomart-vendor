/* tslint:disable */
/* eslint-disable */
/**
 * PardoMart Node API
 * API documentation for the PardoMart Node.js application.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pardomart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AuthInitiateLoginPostRequest } from '../models';
// @ts-ignore
import type { AuthRegisterPostRequest } from '../models';
// @ts-ignore
import type { AuthVerifyLoginPostRequest } from '../models';
/**
 * AuthApi - axios parameter creator
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Checks if a user exists with the given mobile number and role. If they exist, a verification code is sent to their mobile number.
         * @summary Initiate user login or resend verification code
         * @param {AuthInitiateLoginPostRequest} authInitiateLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authInitiateLoginPost: async (authInitiateLoginPostRequest: AuthInitiateLoginPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authInitiateLoginPostRequest' is not null or undefined
            assertParamExists('authInitiateLoginPost', 'authInitiateLoginPostRequest', authInitiateLoginPostRequest)
            const localVarPath = `/auth/initiate-login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authInitiateLoginPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new user account and sends a verification code to their mobile number.
         * @summary Register a new user
         * @param {AuthRegisterPostRequest} authRegisterPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegisterPost: async (authRegisterPostRequest: AuthRegisterPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authRegisterPostRequest' is not null or undefined
            assertParamExists('authRegisterPost', 'authRegisterPostRequest', authRegisterPostRequest)
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authRegisterPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verifies the provided code for the given mobile number and role, and returns a JWT token upon successful verification.
         * @summary Verify code and log in
         * @param {AuthVerifyLoginPostRequest} authVerifyLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authVerifyLoginPost: async (authVerifyLoginPostRequest: AuthVerifyLoginPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authVerifyLoginPostRequest' is not null or undefined
            assertParamExists('authVerifyLoginPost', 'authVerifyLoginPostRequest', authVerifyLoginPostRequest)
            const localVarPath = `/auth/verify-login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authVerifyLoginPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * Checks if a user exists with the given mobile number and role. If they exist, a verification code is sent to their mobile number.
         * @summary Initiate user login or resend verification code
         * @param {AuthInitiateLoginPostRequest} authInitiateLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authInitiateLoginPost(authInitiateLoginPostRequest: AuthInitiateLoginPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authInitiateLoginPost(authInitiateLoginPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authInitiateLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a new user account and sends a verification code to their mobile number.
         * @summary Register a new user
         * @param {AuthRegisterPostRequest} authRegisterPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRegisterPost(authRegisterPostRequest: AuthRegisterPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authRegisterPost(authRegisterPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Verifies the provided code for the given mobile number and role, and returns a JWT token upon successful verification.
         * @summary Verify code and log in
         * @param {AuthVerifyLoginPostRequest} authVerifyLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authVerifyLoginPost(authVerifyLoginPostRequest: AuthVerifyLoginPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authVerifyLoginPost(authVerifyLoginPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authVerifyLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * Checks if a user exists with the given mobile number and role. If they exist, a verification code is sent to their mobile number.
         * @summary Initiate user login or resend verification code
         * @param {AuthInitiateLoginPostRequest} authInitiateLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authInitiateLoginPost(authInitiateLoginPostRequest: AuthInitiateLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authInitiateLoginPost(authInitiateLoginPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new user account and sends a verification code to their mobile number.
         * @summary Register a new user
         * @param {AuthRegisterPostRequest} authRegisterPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegisterPost(authRegisterPostRequest: AuthRegisterPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authRegisterPost(authRegisterPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Verifies the provided code for the given mobile number and role, and returns a JWT token upon successful verification.
         * @summary Verify code and log in
         * @param {AuthVerifyLoginPostRequest} authVerifyLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authVerifyLoginPost(authVerifyLoginPostRequest: AuthVerifyLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authVerifyLoginPost(authVerifyLoginPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 */
export class AuthApi extends BaseAPI {
    /**
     * Checks if a user exists with the given mobile number and role. If they exist, a verification code is sent to their mobile number.
     * @summary Initiate user login or resend verification code
     * @param {AuthInitiateLoginPostRequest} authInitiateLoginPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public authInitiateLoginPost(authInitiateLoginPostRequest: AuthInitiateLoginPostRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authInitiateLoginPost(authInitiateLoginPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new user account and sends a verification code to their mobile number.
     * @summary Register a new user
     * @param {AuthRegisterPostRequest} authRegisterPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public authRegisterPost(authRegisterPostRequest: AuthRegisterPostRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authRegisterPost(authRegisterPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Verifies the provided code for the given mobile number and role, and returns a JWT token upon successful verification.
     * @summary Verify code and log in
     * @param {AuthVerifyLoginPostRequest} authVerifyLoginPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public authVerifyLoginPost(authVerifyLoginPostRequest: AuthVerifyLoginPostRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authVerifyLoginPost(authVerifyLoginPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

