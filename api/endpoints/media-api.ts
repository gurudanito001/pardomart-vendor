/* tslint:disable */
/* eslint-disable */
/**
 * PardoMart Node API
 * API documentation for the PardoMart Node.js application.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pardomart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
/**
 * MediaApi - axios parameter creator
 */
export const MediaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Uploads a file (image, document, etc.) to the server. The file is stored on Cloudinary, and a corresponding record is created in the database. This endpoint requires a `multipart/form-data` request. 
         * @summary Upload a media file
         * @param {File} file The file to upload.
         * @param {string} referenceId The ID of the resource this media is associated with (e.g., a user ID, product ID).
         * @param {string} referenceType The name of the model this media is associated with (e.g., \\\&quot;User\\\&quot;, \\\&quot;Product\\\&quot;, \\\&quot;Vendor\\\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaUploadPost: async (file: File, referenceId: string, referenceType: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('mediaUploadPost', 'file', file)
            // verify required parameter 'referenceId' is not null or undefined
            assertParamExists('mediaUploadPost', 'referenceId', referenceId)
            // verify required parameter 'referenceType' is not null or undefined
            assertParamExists('mediaUploadPost', 'referenceType', referenceType)
            const localVarPath = `/media/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (referenceId !== undefined) { 
                localVarFormParams.append('referenceId', referenceId as any);
            }
    
            if (referenceType !== undefined) { 
                localVarFormParams.append('referenceType', referenceType as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MediaApi - functional programming interface
 */
export const MediaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MediaApiAxiosParamCreator(configuration)
    return {
        /**
         * Uploads a file (image, document, etc.) to the server. The file is stored on Cloudinary, and a corresponding record is created in the database. This endpoint requires a `multipart/form-data` request. 
         * @summary Upload a media file
         * @param {File} file The file to upload.
         * @param {string} referenceId The ID of the resource this media is associated with (e.g., a user ID, product ID).
         * @param {string} referenceType The name of the model this media is associated with (e.g., \\\&quot;User\\\&quot;, \\\&quot;Product\\\&quot;, \\\&quot;Vendor\\\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mediaUploadPost(file: File, referenceId: string, referenceType: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mediaUploadPost(file, referenceId, referenceType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaApi.mediaUploadPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MediaApi - factory interface
 */
export const MediaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MediaApiFp(configuration)
    return {
        /**
         * Uploads a file (image, document, etc.) to the server. The file is stored on Cloudinary, and a corresponding record is created in the database. This endpoint requires a `multipart/form-data` request. 
         * @summary Upload a media file
         * @param {File} file The file to upload.
         * @param {string} referenceId The ID of the resource this media is associated with (e.g., a user ID, product ID).
         * @param {string} referenceType The name of the model this media is associated with (e.g., \\\&quot;User\\\&quot;, \\\&quot;Product\\\&quot;, \\\&quot;Vendor\\\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaUploadPost(file: File, referenceId: string, referenceType: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.mediaUploadPost(file, referenceId, referenceType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MediaApi - object-oriented interface
 */
export class MediaApi extends BaseAPI {
    /**
     * Uploads a file (image, document, etc.) to the server. The file is stored on Cloudinary, and a corresponding record is created in the database. This endpoint requires a `multipart/form-data` request. 
     * @summary Upload a media file
     * @param {File} file The file to upload.
     * @param {string} referenceId The ID of the resource this media is associated with (e.g., a user ID, product ID).
     * @param {string} referenceType The name of the model this media is associated with (e.g., \\\&quot;User\\\&quot;, \\\&quot;Product\\\&quot;, \\\&quot;Vendor\\\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public mediaUploadPost(file: File, referenceId: string, referenceType: string, options?: RawAxiosRequestConfig) {
        return MediaApiFp(this.configuration).mediaUploadPost(file, referenceId, referenceType, options).then((request) => request(this.axios, this.basePath));
    }
}

