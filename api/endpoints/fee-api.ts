/* tslint:disable */
/* eslint-disable */
/**
 * PardoMart Node API
 * API documentation for the PardoMart Node.js application.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pardomart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CalculateFeesPayload } from '../models';
// @ts-ignore
import type { CalculateFeesResponse } from '../models';
// @ts-ignore
import type { CreateFeePayload } from '../models';
// @ts-ignore
import type { Fee } from '../models';
// @ts-ignore
import type { UpdateFeePayload } from '../models';
/**
 * FeeApi - axios parameter creator
 */
export const FeeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Calculate the total estimated cost for an order
         * @param {CalculateFeesPayload} calculateFeesPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feesCalculateFeesPost: async (calculateFeesPayload: CalculateFeesPayload, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'calculateFeesPayload' is not null or undefined
            assertParamExists('feesCalculateFeesPost', 'calculateFeesPayload', calculateFeesPayload)
            const localVarPath = `/fees/calculate-fees`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(calculateFeesPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all current active fees
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feesCurrentGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fees/current`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the current active fee for a specific type
         * @param {FeesCurrentTypeGetTypeEnum} type The type of fee to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feesCurrentTypeGet: async (type: FeesCurrentTypeGetTypeEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('feesCurrentTypeGet', 'type', type)
            const localVarPath = `/fees/current/{type}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deactivate the current active fee of a specific type
         * @param {FeesDeactivateTypePatchTypeEnum} type The type of fee to deactivate.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feesDeactivateTypePatch: async (type: FeesDeactivateTypePatchTypeEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('feesDeactivateTypePatch', 'type', type)
            const localVarPath = `/fees/deactivate/{type}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a fee by its ID
         * @param {string} id The ID of the fee to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feesIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('feesIdDelete', 'id', id)
            const localVarPath = `/fees/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing fee
         * @param {UpdateFeePayload} updateFeePayload 
         * @param {string} id The ID of the fee to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feesIdPatch: async (updateFeePayload: UpdateFeePayload, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateFeePayload' is not null or undefined
            assertParamExists('feesIdPatch', 'updateFeePayload', updateFeePayload)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('feesIdPatch', 'id', id)
            const localVarPath = `/fees/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateFeePayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new fee
         * @param {CreateFeePayload} createFeePayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feesPost: async (createFeePayload: CreateFeePayload, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createFeePayload' is not null or undefined
            assertParamExists('feesPost', 'createFeePayload', createFeePayload)
            const localVarPath = `/fees`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createFeePayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeeApi - functional programming interface
 */
export const FeeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FeeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Calculate the total estimated cost for an order
         * @param {CalculateFeesPayload} calculateFeesPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feesCalculateFeesPost(calculateFeesPayload: CalculateFeesPayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CalculateFeesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feesCalculateFeesPost(calculateFeesPayload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeeApi.feesCalculateFeesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all current active fees
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feesCurrentGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Fee>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feesCurrentGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeeApi.feesCurrentGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get the current active fee for a specific type
         * @param {FeesCurrentTypeGetTypeEnum} type The type of fee to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feesCurrentTypeGet(type: FeesCurrentTypeGetTypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Fee>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feesCurrentTypeGet(type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeeApi.feesCurrentTypeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Deactivate the current active fee of a specific type
         * @param {FeesDeactivateTypePatchTypeEnum} type The type of fee to deactivate.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feesDeactivateTypePatch(type: FeesDeactivateTypePatchTypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Fee>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feesDeactivateTypePatch(type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeeApi.feesDeactivateTypePatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a fee by its ID
         * @param {string} id The ID of the fee to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feesIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Fee>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feesIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeeApi.feesIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update an existing fee
         * @param {UpdateFeePayload} updateFeePayload 
         * @param {string} id The ID of the fee to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feesIdPatch(updateFeePayload: UpdateFeePayload, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Fee>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feesIdPatch(updateFeePayload, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeeApi.feesIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new fee
         * @param {CreateFeePayload} createFeePayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feesPost(createFeePayload: CreateFeePayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Fee>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feesPost(createFeePayload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeeApi.feesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FeeApi - factory interface
 */
export const FeeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FeeApiFp(configuration)
    return {
        /**
         * 
         * @summary Calculate the total estimated cost for an order
         * @param {CalculateFeesPayload} calculateFeesPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feesCalculateFeesPost(calculateFeesPayload: CalculateFeesPayload, options?: RawAxiosRequestConfig): AxiosPromise<CalculateFeesResponse> {
            return localVarFp.feesCalculateFeesPost(calculateFeesPayload, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all current active fees
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feesCurrentGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Fee>> {
            return localVarFp.feesCurrentGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the current active fee for a specific type
         * @param {FeesCurrentTypeGetTypeEnum} type The type of fee to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feesCurrentTypeGet(type: FeesCurrentTypeGetTypeEnum, options?: RawAxiosRequestConfig): AxiosPromise<Fee> {
            return localVarFp.feesCurrentTypeGet(type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deactivate the current active fee of a specific type
         * @param {FeesDeactivateTypePatchTypeEnum} type The type of fee to deactivate.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feesDeactivateTypePatch(type: FeesDeactivateTypePatchTypeEnum, options?: RawAxiosRequestConfig): AxiosPromise<Fee> {
            return localVarFp.feesDeactivateTypePatch(type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a fee by its ID
         * @param {string} id The ID of the fee to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feesIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Fee> {
            return localVarFp.feesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing fee
         * @param {UpdateFeePayload} updateFeePayload 
         * @param {string} id The ID of the fee to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feesIdPatch(updateFeePayload: UpdateFeePayload, id: string, options?: RawAxiosRequestConfig): AxiosPromise<Fee> {
            return localVarFp.feesIdPatch(updateFeePayload, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new fee
         * @param {CreateFeePayload} createFeePayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feesPost(createFeePayload: CreateFeePayload, options?: RawAxiosRequestConfig): AxiosPromise<Fee> {
            return localVarFp.feesPost(createFeePayload, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FeeApi - object-oriented interface
 */
export class FeeApi extends BaseAPI {
    /**
     * 
     * @summary Calculate the total estimated cost for an order
     * @param {CalculateFeesPayload} calculateFeesPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public feesCalculateFeesPost(calculateFeesPayload: CalculateFeesPayload, options?: RawAxiosRequestConfig) {
        return FeeApiFp(this.configuration).feesCalculateFeesPost(calculateFeesPayload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all current active fees
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public feesCurrentGet(options?: RawAxiosRequestConfig) {
        return FeeApiFp(this.configuration).feesCurrentGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the current active fee for a specific type
     * @param {FeesCurrentTypeGetTypeEnum} type The type of fee to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public feesCurrentTypeGet(type: FeesCurrentTypeGetTypeEnum, options?: RawAxiosRequestConfig) {
        return FeeApiFp(this.configuration).feesCurrentTypeGet(type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deactivate the current active fee of a specific type
     * @param {FeesDeactivateTypePatchTypeEnum} type The type of fee to deactivate.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public feesDeactivateTypePatch(type: FeesDeactivateTypePatchTypeEnum, options?: RawAxiosRequestConfig) {
        return FeeApiFp(this.configuration).feesDeactivateTypePatch(type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a fee by its ID
     * @param {string} id The ID of the fee to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public feesIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return FeeApiFp(this.configuration).feesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing fee
     * @param {UpdateFeePayload} updateFeePayload 
     * @param {string} id The ID of the fee to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public feesIdPatch(updateFeePayload: UpdateFeePayload, id: string, options?: RawAxiosRequestConfig) {
        return FeeApiFp(this.configuration).feesIdPatch(updateFeePayload, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new fee
     * @param {CreateFeePayload} createFeePayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public feesPost(createFeePayload: CreateFeePayload, options?: RawAxiosRequestConfig) {
        return FeeApiFp(this.configuration).feesPost(createFeePayload, options).then((request) => request(this.axios, this.basePath));
    }
}

export const FeesCurrentTypeGetTypeEnum = {
    Delivery: 'delivery',
    Service: 'service',
    Shopping: 'shopping'
} as const;
export type FeesCurrentTypeGetTypeEnum = typeof FeesCurrentTypeGetTypeEnum[keyof typeof FeesCurrentTypeGetTypeEnum];
export const FeesDeactivateTypePatchTypeEnum = {
    Delivery: 'delivery',
    Service: 'service',
    Shopping: 'shopping'
} as const;
export type FeesDeactivateTypePatchTypeEnum = typeof FeesDeactivateTypePatchTypeEnum[keyof typeof FeesDeactivateTypePatchTypeEnum];
