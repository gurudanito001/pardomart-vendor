/* tslint:disable */
/* eslint-disable */
/**
 * PardoMart Node API
 * API documentation for the PardoMart Node.js application.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pardomart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AddCartItemPayload } from '../models';
// @ts-ignore
import type { Cart } from '../models';
// @ts-ignore
import type { CartItemWithProduct } from '../models';
// @ts-ignore
import type { UpdateCartItemPayload } from '../models';
/**
 * CartItemApi - axios parameter creator
 */
export const CartItemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete a cart item by its ID
         * @param {string} id The ID of the cart item to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartItemsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cartItemsIdDelete', 'id', id)
            const localVarPath = `/cart-items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a single cart item by its ID
         * @param {string} id The ID of the cart item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartItemsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cartItemsIdGet', 'id', id)
            const localVarPath = `/cart-items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a cart item\'s quantity
         * @param {UpdateCartItemPayload} updateCartItemPayload 
         * @param {string} id The ID of the cart item to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartItemsIdPut: async (updateCartItemPayload: UpdateCartItemPayload, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateCartItemPayload' is not null or undefined
            assertParamExists('cartItemsIdPut', 'updateCartItemPayload', updateCartItemPayload)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cartItemsIdPut', 'id', id)
            const localVarPath = `/cart-items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCartItemPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds an item to the appropriate vendor\'s cart. If a cart for that vendor doesn\'t exist, it\'s created. If the item is already in the cart, its quantity is updated to the new value provided. 
         * @summary Add or update an item in the cart.
         * @param {AddCartItemPayload} addCartItemPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartItemsPost: async (addCartItemPayload: AddCartItemPayload, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addCartItemPayload' is not null or undefined
            assertParamExists('cartItemsPost', 'addCartItemPayload', addCartItemPayload)
            const localVarPath = `/cart-items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addCartItemPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartItemApi - functional programming interface
 */
export const CartItemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartItemApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete a cart item by its ID
         * @param {string} id The ID of the cart item to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartItemsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CartItemWithProduct>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartItemsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartItemApi.cartItemsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a single cart item by its ID
         * @param {string} id The ID of the cart item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartItemsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CartItemWithProduct>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartItemsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartItemApi.cartItemsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a cart item\'s quantity
         * @param {UpdateCartItemPayload} updateCartItemPayload 
         * @param {string} id The ID of the cart item to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartItemsIdPut(updateCartItemPayload: UpdateCartItemPayload, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CartItemWithProduct>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartItemsIdPut(updateCartItemPayload, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartItemApi.cartItemsIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Adds an item to the appropriate vendor\'s cart. If a cart for that vendor doesn\'t exist, it\'s created. If the item is already in the cart, its quantity is updated to the new value provided. 
         * @summary Add or update an item in the cart.
         * @param {AddCartItemPayload} addCartItemPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartItemsPost(addCartItemPayload: AddCartItemPayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Cart>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartItemsPost(addCartItemPayload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartItemApi.cartItemsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CartItemApi - factory interface
 */
export const CartItemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartItemApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete a cart item by its ID
         * @param {string} id The ID of the cart item to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartItemsIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<CartItemWithProduct> {
            return localVarFp.cartItemsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a single cart item by its ID
         * @param {string} id The ID of the cart item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartItemsIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<CartItemWithProduct> {
            return localVarFp.cartItemsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a cart item\'s quantity
         * @param {UpdateCartItemPayload} updateCartItemPayload 
         * @param {string} id The ID of the cart item to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartItemsIdPut(updateCartItemPayload: UpdateCartItemPayload, id: string, options?: RawAxiosRequestConfig): AxiosPromise<CartItemWithProduct> {
            return localVarFp.cartItemsIdPut(updateCartItemPayload, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds an item to the appropriate vendor\'s cart. If a cart for that vendor doesn\'t exist, it\'s created. If the item is already in the cart, its quantity is updated to the new value provided. 
         * @summary Add or update an item in the cart.
         * @param {AddCartItemPayload} addCartItemPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartItemsPost(addCartItemPayload: AddCartItemPayload, options?: RawAxiosRequestConfig): AxiosPromise<Cart> {
            return localVarFp.cartItemsPost(addCartItemPayload, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartItemApi - object-oriented interface
 */
export class CartItemApi extends BaseAPI {
    /**
     * 
     * @summary Delete a cart item by its ID
     * @param {string} id The ID of the cart item to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public cartItemsIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return CartItemApiFp(this.configuration).cartItemsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a single cart item by its ID
     * @param {string} id The ID of the cart item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public cartItemsIdGet(id: string, options?: RawAxiosRequestConfig) {
        return CartItemApiFp(this.configuration).cartItemsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a cart item\'s quantity
     * @param {UpdateCartItemPayload} updateCartItemPayload 
     * @param {string} id The ID of the cart item to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public cartItemsIdPut(updateCartItemPayload: UpdateCartItemPayload, id: string, options?: RawAxiosRequestConfig) {
        return CartItemApiFp(this.configuration).cartItemsIdPut(updateCartItemPayload, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds an item to the appropriate vendor\'s cart. If a cart for that vendor doesn\'t exist, it\'s created. If the item is already in the cart, its quantity is updated to the new value provided. 
     * @summary Add or update an item in the cart.
     * @param {AddCartItemPayload} addCartItemPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public cartItemsPost(addCartItemPayload: AddCartItemPayload, options?: RawAxiosRequestConfig) {
        return CartItemApiFp(this.configuration).cartItemsPost(addCartItemPayload, options).then((request) => request(this.axios, this.basePath));
    }
}

