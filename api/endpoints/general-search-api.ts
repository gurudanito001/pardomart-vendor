/* tslint:disable */
/* eslint-disable */
/**
 * PardoMart Node API
 * API documentation for the PardoMart Node.js application.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pardomart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { GeneralSearchStoreProductsStoreIdGet200Response } from '../models';
// @ts-ignore
import type { StoresByProductResult } from '../models';
/**
 * GeneralSearchApi - axios parameter creator
 */
export const GeneralSearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Searches for a category by ID and returns a list of stores that sell products in that category (and its sub-categories), sorted by proximity to the user.
         * @summary Find stores by category ID
         * @param {string} categoryId The ID of the category to search for.
         * @param {number} latitude User\&#39;s current latitude.
         * @param {number} longitude User\&#39;s current longitude.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generalSearchCategoryCategoryIdGet: async (categoryId: string, latitude: number, longitude: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('generalSearchCategoryCategoryIdGet', 'categoryId', categoryId)
            // verify required parameter 'latitude' is not null or undefined
            assertParamExists('generalSearchCategoryCategoryIdGet', 'latitude', latitude)
            // verify required parameter 'longitude' is not null or undefined
            assertParamExists('generalSearchCategoryCategoryIdGet', 'longitude', longitude)
            const localVarPath = `/generalSearch/category/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Searches for a category by name and returns a list of stores that sell products in that category, sorted by proximity to the user.
         * @summary Find stores by category name
         * @param {string} search The name of the category to search for.
         * @param {number} latitude User\&#39;s current latitude.
         * @param {number} longitude User\&#39;s current longitude.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generalSearchCategoryGet: async (search: string, latitude: number, longitude: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'search' is not null or undefined
            assertParamExists('generalSearchCategoryGet', 'search', search)
            // verify required parameter 'latitude' is not null or undefined
            assertParamExists('generalSearchCategoryGet', 'latitude', latitude)
            // verify required parameter 'longitude' is not null or undefined
            assertParamExists('generalSearchCategoryGet', 'longitude', longitude)
            const localVarPath = `/generalSearch/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Searches for a product by name and returns a list of stores that sell it, sorted by proximity to the user. Each store result includes other products they sell.
         * @summary Find stores that sell a specific product
         * @param {string} search The name of the product to search for.
         * @param {number} latitude User\&#39;s current latitude.
         * @param {number} longitude User\&#39;s current longitude.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generalSearchProductGet: async (search: string, latitude: number, longitude: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'search' is not null or undefined
            assertParamExists('generalSearchProductGet', 'search', search)
            // verify required parameter 'latitude' is not null or undefined
            assertParamExists('generalSearchProductGet', 'latitude', latitude)
            // verify required parameter 'longitude' is not null or undefined
            assertParamExists('generalSearchProductGet', 'longitude', longitude)
            const localVarPath = `/generalSearch/product`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Searches for a store by name and returns a list of stores, sorted by proximity to the user. Each store result includes products they sell.
         * @summary Find stores by name
         * @param {string} search The name of the store to search for.
         * @param {number} latitude User\&#39;s current latitude.
         * @param {number} longitude User\&#39;s current longitude.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generalSearchStoreGet: async (search: string, latitude: number, longitude: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'search' is not null or undefined
            assertParamExists('generalSearchStoreGet', 'search', search)
            // verify required parameter 'latitude' is not null or undefined
            assertParamExists('generalSearchStoreGet', 'latitude', latitude)
            // verify required parameter 'longitude' is not null or undefined
            assertParamExists('generalSearchStoreGet', 'longitude', longitude)
            const localVarPath = `/generalSearch/store`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Searches for products within a specific store, optionally filtering by a search term and/or category. If no categoryId is provided, it returns products grouped by their parent category. If a categoryId is provided, it returns a flat list of products within that category. 
         * @summary Search for products within a specific store
         * @param {string} storeId The ID of the store (vendor) to search within.
         * @param {string} [searchTerm] The search term to filter products by name.
         * @param {string} [categoryId] The ID of the category to filter products by. If provided, results will not be grouped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generalSearchStoreProductsStoreIdGet: async (storeId: string, searchTerm?: string, categoryId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('generalSearchStoreProductsStoreIdGet', 'storeId', storeId)
            const localVarPath = `/generalSearch/storeProducts/{storeId}`
                .replace(`{${"storeId"}}`, encodeURIComponent(String(storeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchTerm !== undefined) {
                localVarQueryParameter['searchTerm'] = searchTerm;
            }

            if (categoryId !== undefined) {
                localVarQueryParameter['categoryId'] = categoryId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GeneralSearchApi - functional programming interface
 */
export const GeneralSearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GeneralSearchApiAxiosParamCreator(configuration)
    return {
        /**
         * Searches for a category by ID and returns a list of stores that sell products in that category (and its sub-categories), sorted by proximity to the user.
         * @summary Find stores by category ID
         * @param {string} categoryId The ID of the category to search for.
         * @param {number} latitude User\&#39;s current latitude.
         * @param {number} longitude User\&#39;s current longitude.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generalSearchCategoryCategoryIdGet(categoryId: string, latitude: number, longitude: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoresByProductResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generalSearchCategoryCategoryIdGet(categoryId, latitude, longitude, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GeneralSearchApi.generalSearchCategoryCategoryIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Searches for a category by name and returns a list of stores that sell products in that category, sorted by proximity to the user.
         * @summary Find stores by category name
         * @param {string} search The name of the category to search for.
         * @param {number} latitude User\&#39;s current latitude.
         * @param {number} longitude User\&#39;s current longitude.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generalSearchCategoryGet(search: string, latitude: number, longitude: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoresByProductResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generalSearchCategoryGet(search, latitude, longitude, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GeneralSearchApi.generalSearchCategoryGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Searches for a product by name and returns a list of stores that sell it, sorted by proximity to the user. Each store result includes other products they sell.
         * @summary Find stores that sell a specific product
         * @param {string} search The name of the product to search for.
         * @param {number} latitude User\&#39;s current latitude.
         * @param {number} longitude User\&#39;s current longitude.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generalSearchProductGet(search: string, latitude: number, longitude: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoresByProductResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generalSearchProductGet(search, latitude, longitude, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GeneralSearchApi.generalSearchProductGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Searches for a store by name and returns a list of stores, sorted by proximity to the user. Each store result includes products they sell.
         * @summary Find stores by name
         * @param {string} search The name of the store to search for.
         * @param {number} latitude User\&#39;s current latitude.
         * @param {number} longitude User\&#39;s current longitude.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generalSearchStoreGet(search: string, latitude: number, longitude: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoresByProductResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generalSearchStoreGet(search, latitude, longitude, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GeneralSearchApi.generalSearchStoreGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Searches for products within a specific store, optionally filtering by a search term and/or category. If no categoryId is provided, it returns products grouped by their parent category. If a categoryId is provided, it returns a flat list of products within that category. 
         * @summary Search for products within a specific store
         * @param {string} storeId The ID of the store (vendor) to search within.
         * @param {string} [searchTerm] The search term to filter products by name.
         * @param {string} [categoryId] The ID of the category to filter products by. If provided, results will not be grouped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generalSearchStoreProductsStoreIdGet(storeId: string, searchTerm?: string, categoryId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneralSearchStoreProductsStoreIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generalSearchStoreProductsStoreIdGet(storeId, searchTerm, categoryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GeneralSearchApi.generalSearchStoreProductsStoreIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GeneralSearchApi - factory interface
 */
export const GeneralSearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GeneralSearchApiFp(configuration)
    return {
        /**
         * Searches for a category by ID and returns a list of stores that sell products in that category (and its sub-categories), sorted by proximity to the user.
         * @summary Find stores by category ID
         * @param {string} categoryId The ID of the category to search for.
         * @param {number} latitude User\&#39;s current latitude.
         * @param {number} longitude User\&#39;s current longitude.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generalSearchCategoryCategoryIdGet(categoryId: string, latitude: number, longitude: number, options?: RawAxiosRequestConfig): AxiosPromise<StoresByProductResult> {
            return localVarFp.generalSearchCategoryCategoryIdGet(categoryId, latitude, longitude, options).then((request) => request(axios, basePath));
        },
        /**
         * Searches for a category by name and returns a list of stores that sell products in that category, sorted by proximity to the user.
         * @summary Find stores by category name
         * @param {string} search The name of the category to search for.
         * @param {number} latitude User\&#39;s current latitude.
         * @param {number} longitude User\&#39;s current longitude.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generalSearchCategoryGet(search: string, latitude: number, longitude: number, options?: RawAxiosRequestConfig): AxiosPromise<StoresByProductResult> {
            return localVarFp.generalSearchCategoryGet(search, latitude, longitude, options).then((request) => request(axios, basePath));
        },
        /**
         * Searches for a product by name and returns a list of stores that sell it, sorted by proximity to the user. Each store result includes other products they sell.
         * @summary Find stores that sell a specific product
         * @param {string} search The name of the product to search for.
         * @param {number} latitude User\&#39;s current latitude.
         * @param {number} longitude User\&#39;s current longitude.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generalSearchProductGet(search: string, latitude: number, longitude: number, options?: RawAxiosRequestConfig): AxiosPromise<StoresByProductResult> {
            return localVarFp.generalSearchProductGet(search, latitude, longitude, options).then((request) => request(axios, basePath));
        },
        /**
         * Searches for a store by name and returns a list of stores, sorted by proximity to the user. Each store result includes products they sell.
         * @summary Find stores by name
         * @param {string} search The name of the store to search for.
         * @param {number} latitude User\&#39;s current latitude.
         * @param {number} longitude User\&#39;s current longitude.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generalSearchStoreGet(search: string, latitude: number, longitude: number, options?: RawAxiosRequestConfig): AxiosPromise<StoresByProductResult> {
            return localVarFp.generalSearchStoreGet(search, latitude, longitude, options).then((request) => request(axios, basePath));
        },
        /**
         * Searches for products within a specific store, optionally filtering by a search term and/or category. If no categoryId is provided, it returns products grouped by their parent category. If a categoryId is provided, it returns a flat list of products within that category. 
         * @summary Search for products within a specific store
         * @param {string} storeId The ID of the store (vendor) to search within.
         * @param {string} [searchTerm] The search term to filter products by name.
         * @param {string} [categoryId] The ID of the category to filter products by. If provided, results will not be grouped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generalSearchStoreProductsStoreIdGet(storeId: string, searchTerm?: string, categoryId?: string, options?: RawAxiosRequestConfig): AxiosPromise<GeneralSearchStoreProductsStoreIdGet200Response> {
            return localVarFp.generalSearchStoreProductsStoreIdGet(storeId, searchTerm, categoryId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GeneralSearchApi - object-oriented interface
 */
export class GeneralSearchApi extends BaseAPI {
    /**
     * Searches for a category by ID and returns a list of stores that sell products in that category (and its sub-categories), sorted by proximity to the user.
     * @summary Find stores by category ID
     * @param {string} categoryId The ID of the category to search for.
     * @param {number} latitude User\&#39;s current latitude.
     * @param {number} longitude User\&#39;s current longitude.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public generalSearchCategoryCategoryIdGet(categoryId: string, latitude: number, longitude: number, options?: RawAxiosRequestConfig) {
        return GeneralSearchApiFp(this.configuration).generalSearchCategoryCategoryIdGet(categoryId, latitude, longitude, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Searches for a category by name and returns a list of stores that sell products in that category, sorted by proximity to the user.
     * @summary Find stores by category name
     * @param {string} search The name of the category to search for.
     * @param {number} latitude User\&#39;s current latitude.
     * @param {number} longitude User\&#39;s current longitude.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public generalSearchCategoryGet(search: string, latitude: number, longitude: number, options?: RawAxiosRequestConfig) {
        return GeneralSearchApiFp(this.configuration).generalSearchCategoryGet(search, latitude, longitude, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Searches for a product by name and returns a list of stores that sell it, sorted by proximity to the user. Each store result includes other products they sell.
     * @summary Find stores that sell a specific product
     * @param {string} search The name of the product to search for.
     * @param {number} latitude User\&#39;s current latitude.
     * @param {number} longitude User\&#39;s current longitude.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public generalSearchProductGet(search: string, latitude: number, longitude: number, options?: RawAxiosRequestConfig) {
        return GeneralSearchApiFp(this.configuration).generalSearchProductGet(search, latitude, longitude, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Searches for a store by name and returns a list of stores, sorted by proximity to the user. Each store result includes products they sell.
     * @summary Find stores by name
     * @param {string} search The name of the store to search for.
     * @param {number} latitude User\&#39;s current latitude.
     * @param {number} longitude User\&#39;s current longitude.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public generalSearchStoreGet(search: string, latitude: number, longitude: number, options?: RawAxiosRequestConfig) {
        return GeneralSearchApiFp(this.configuration).generalSearchStoreGet(search, latitude, longitude, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Searches for products within a specific store, optionally filtering by a search term and/or category. If no categoryId is provided, it returns products grouped by their parent category. If a categoryId is provided, it returns a flat list of products within that category. 
     * @summary Search for products within a specific store
     * @param {string} storeId The ID of the store (vendor) to search within.
     * @param {string} [searchTerm] The search term to filter products by name.
     * @param {string} [categoryId] The ID of the category to filter products by. If provided, results will not be grouped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public generalSearchStoreProductsStoreIdGet(storeId: string, searchTerm?: string, categoryId?: string, options?: RawAxiosRequestConfig) {
        return GeneralSearchApiFp(this.configuration).generalSearchStoreProductsStoreIdGet(storeId, searchTerm, categoryId, options).then((request) => request(this.axios, this.basePath));
    }
}

