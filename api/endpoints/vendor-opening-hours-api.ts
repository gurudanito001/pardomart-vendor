/* tslint:disable */
/* eslint-disable */
/**
 * PardoMart Node API
 * API documentation for the PardoMart Node.js application.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pardomart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { UpdateOpeningHoursPayload } from '../models';
// @ts-ignore
import type { VendorOpeningHours } from '../models';
/**
 * VendorOpeningHoursApi - axios parameter creator
 */
export const VendorOpeningHoursApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all opening hours for a specific vendor
         * @param {string} vendorId The ID of the vendor to retrieve opening hours for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openingHoursGet: async (vendorId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vendorId' is not null or undefined
            assertParamExists('openingHoursGet', 'vendorId', vendorId)
            const localVarPath = `/openingHours`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (vendorId !== undefined) {
                localVarQueryParameter['vendorId'] = vendorId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finds and updates the opening and closing times for a given vendor on a specific day of the week.
         * @summary Update opening hours for a specific day
         * @param {UpdateOpeningHoursPayload} updateOpeningHoursPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openingHoursPatch: async (updateOpeningHoursPayload: UpdateOpeningHoursPayload, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateOpeningHoursPayload' is not null or undefined
            assertParamExists('openingHoursPatch', 'updateOpeningHoursPayload', updateOpeningHoursPayload)
            const localVarPath = `/openingHours`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateOpeningHoursPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VendorOpeningHoursApi - functional programming interface
 */
export const VendorOpeningHoursApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VendorOpeningHoursApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all opening hours for a specific vendor
         * @param {string} vendorId The ID of the vendor to retrieve opening hours for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async openingHoursGet(vendorId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VendorOpeningHours>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.openingHoursGet(vendorId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VendorOpeningHoursApi.openingHoursGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Finds and updates the opening and closing times for a given vendor on a specific day of the week.
         * @summary Update opening hours for a specific day
         * @param {UpdateOpeningHoursPayload} updateOpeningHoursPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async openingHoursPatch(updateOpeningHoursPayload: UpdateOpeningHoursPayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VendorOpeningHours>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.openingHoursPatch(updateOpeningHoursPayload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VendorOpeningHoursApi.openingHoursPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VendorOpeningHoursApi - factory interface
 */
export const VendorOpeningHoursApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VendorOpeningHoursApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all opening hours for a specific vendor
         * @param {string} vendorId The ID of the vendor to retrieve opening hours for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openingHoursGet(vendorId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<VendorOpeningHours>> {
            return localVarFp.openingHoursGet(vendorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Finds and updates the opening and closing times for a given vendor on a specific day of the week.
         * @summary Update opening hours for a specific day
         * @param {UpdateOpeningHoursPayload} updateOpeningHoursPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openingHoursPatch(updateOpeningHoursPayload: UpdateOpeningHoursPayload, options?: RawAxiosRequestConfig): AxiosPromise<VendorOpeningHours> {
            return localVarFp.openingHoursPatch(updateOpeningHoursPayload, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VendorOpeningHoursApi - object-oriented interface
 */
export class VendorOpeningHoursApi extends BaseAPI {
    /**
     * 
     * @summary Get all opening hours for a specific vendor
     * @param {string} vendorId The ID of the vendor to retrieve opening hours for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public openingHoursGet(vendorId: string, options?: RawAxiosRequestConfig) {
        return VendorOpeningHoursApiFp(this.configuration).openingHoursGet(vendorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Finds and updates the opening and closing times for a given vendor on a specific day of the week.
     * @summary Update opening hours for a specific day
     * @param {UpdateOpeningHoursPayload} updateOpeningHoursPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public openingHoursPatch(updateOpeningHoursPayload: UpdateOpeningHoursPayload, options?: RawAxiosRequestConfig) {
        return VendorOpeningHoursApiFp(this.configuration).openingHoursPatch(updateOpeningHoursPayload, options).then((request) => request(this.axios, this.basePath));
    }
}

