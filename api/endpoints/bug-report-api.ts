/* tslint:disable */
/* eslint-disable */
/**
 * PardoMart Node API
 * API documentation for the PardoMart Node.js application.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pardomart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { BugReportsIdStatusPatchRequest } from '../models';
/**
 * BugReportApi - axios parameter creator
 */
export const BugReportApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Update a bug report\'s status (Admin only)
         * @param {BugReportsIdStatusPatchRequest} bugReportsIdStatusPatchRequest 
         * @param {string} id The ID of the bug report to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bugReportsIdStatusPatch: async (bugReportsIdStatusPatchRequest: BugReportsIdStatusPatchRequest, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bugReportsIdStatusPatchRequest' is not null or undefined
            assertParamExists('bugReportsIdStatusPatch', 'bugReportsIdStatusPatchRequest', bugReportsIdStatusPatchRequest)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('bugReportsIdStatusPatch', 'id', id)
            const localVarPath = `/bug-reports/{id}/status`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bugReportsIdStatusPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Report a bug
         * @param {string} description A description of the bug.
         * @param {File} [image] (Optional) An image of the bug.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bugReportsPost: async (description: string, image?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'description' is not null or undefined
            assertParamExists('bugReportsPost', 'description', description)
            const localVarPath = `/bug-reports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BugReportApi - functional programming interface
 */
export const BugReportApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BugReportApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Update a bug report\'s status (Admin only)
         * @param {BugReportsIdStatusPatchRequest} bugReportsIdStatusPatchRequest 
         * @param {string} id The ID of the bug report to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bugReportsIdStatusPatch(bugReportsIdStatusPatchRequest: BugReportsIdStatusPatchRequest, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bugReportsIdStatusPatch(bugReportsIdStatusPatchRequest, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BugReportApi.bugReportsIdStatusPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Report a bug
         * @param {string} description A description of the bug.
         * @param {File} [image] (Optional) An image of the bug.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bugReportsPost(description: string, image?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bugReportsPost(description, image, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BugReportApi.bugReportsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BugReportApi - factory interface
 */
export const BugReportApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BugReportApiFp(configuration)
    return {
        /**
         * 
         * @summary Update a bug report\'s status (Admin only)
         * @param {BugReportsIdStatusPatchRequest} bugReportsIdStatusPatchRequest 
         * @param {string} id The ID of the bug report to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bugReportsIdStatusPatch(bugReportsIdStatusPatchRequest: BugReportsIdStatusPatchRequest, id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.bugReportsIdStatusPatch(bugReportsIdStatusPatchRequest, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Report a bug
         * @param {string} description A description of the bug.
         * @param {File} [image] (Optional) An image of the bug.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bugReportsPost(description: string, image?: File, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.bugReportsPost(description, image, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BugReportApi - object-oriented interface
 */
export class BugReportApi extends BaseAPI {
    /**
     * 
     * @summary Update a bug report\'s status (Admin only)
     * @param {BugReportsIdStatusPatchRequest} bugReportsIdStatusPatchRequest 
     * @param {string} id The ID of the bug report to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public bugReportsIdStatusPatch(bugReportsIdStatusPatchRequest: BugReportsIdStatusPatchRequest, id: string, options?: RawAxiosRequestConfig) {
        return BugReportApiFp(this.configuration).bugReportsIdStatusPatch(bugReportsIdStatusPatchRequest, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Report a bug
     * @param {string} description A description of the bug.
     * @param {File} [image] (Optional) An image of the bug.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public bugReportsPost(description: string, image?: File, options?: RawAxiosRequestConfig) {
        return BugReportApiFp(this.configuration).bugReportsPost(description, image, options).then((request) => request(this.axios, this.basePath));
    }
}

