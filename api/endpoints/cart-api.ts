/* tslint:disable */
/* eslint-disable */
/**
 * PardoMart Node API
 * API documentation for the PardoMart Node.js application.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pardomart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Cart } from '../models';
/**
 * CartApi - axios parameter creator
 */
export const CartApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete a cart by its ID
         * @param {string} cartId The ID of the cart to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartCartIdDelete: async (cartId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('cartCartIdDelete', 'cartId', cartId)
            const localVarPath = `/cart/{cartId}`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a specific cart by its ID
         * @param {string} cartId The ID of the cart to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartCartIdGet: async (cartId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('cartCartIdGet', 'cartId', cartId)
            const localVarPath = `/cart/{cartId}`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all carts for the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cart`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartApi - functional programming interface
 */
export const CartApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete a cart by its ID
         * @param {string} cartId The ID of the cart to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartCartIdDelete(cartId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartCartIdDelete(cartId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.cartCartIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a specific cart by its ID
         * @param {string} cartId The ID of the cart to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartCartIdGet(cartId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Cart>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartCartIdGet(cartId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.cartCartIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all carts for the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Cart>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.cartGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CartApi - factory interface
 */
export const CartApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete a cart by its ID
         * @param {string} cartId The ID of the cart to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartCartIdDelete(cartId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cartCartIdDelete(cartId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a specific cart by its ID
         * @param {string} cartId The ID of the cart to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartCartIdGet(cartId: string, options?: RawAxiosRequestConfig): AxiosPromise<Cart> {
            return localVarFp.cartCartIdGet(cartId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all carts for the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Cart>> {
            return localVarFp.cartGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartApi - object-oriented interface
 */
export class CartApi extends BaseAPI {
    /**
     * 
     * @summary Delete a cart by its ID
     * @param {string} cartId The ID of the cart to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public cartCartIdDelete(cartId: string, options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).cartCartIdDelete(cartId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a specific cart by its ID
     * @param {string} cartId The ID of the cart to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public cartCartIdGet(cartId: string, options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).cartCartIdGet(cartId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all carts for the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public cartGet(options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).cartGet(options).then((request) => request(this.axios, this.basePath));
    }
}

