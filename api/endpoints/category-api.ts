/* tslint:disable */
/* eslint-disable */
/**
 * PardoMart Node API
 * API documentation for the PardoMart Node.js application.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pardomart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Category } from '../models';
// @ts-ignore
import type { CreateCategoriesBulkPayload } from '../models';
// @ts-ignore
import type { CreateCategoryPayload } from '../models';
// @ts-ignore
import type { UpdateCategoryPayload } from '../models';
/**
 * CategoryApi - axios parameter creator
 */
export const CategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create multiple categories in bulk
         * @param {CreateCategoriesBulkPayload} createCategoriesBulkPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryBulkPost: async (createCategoriesBulkPayload: CreateCategoriesBulkPayload, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCategoriesBulkPayload' is not null or undefined
            assertParamExists('categoryBulkPost', 'createCategoriesBulkPayload', createCategoriesBulkPayload)
            const localVarPath = `/category/bulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCategoriesBulkPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all categories, with optional filters
         * @param {string} [parentId] Filter categories by their parent ID.
         * @param {CategoryGetTypeEnum} [type] Filter categories by their type.
         * @param {string} [name] Filter categories by name (case-insensitive search).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryGet: async (parentId?: string, type?: CategoryGetTypeEnum, name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (parentId !== undefined) {
                localVarQueryParameter['parentId'] = parentId;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a category
         * @param {string} id The ID of the category to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('categoryIdDelete', 'id', id)
            const localVarPath = `/category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a category by its ID
         * @param {string} id The ID of the category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('categoryIdGet', 'id', id)
            const localVarPath = `/category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a category
         * @param {UpdateCategoryPayload} updateCategoryPayload 
         * @param {string} id The ID of the category to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryIdPut: async (updateCategoryPayload: UpdateCategoryPayload, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateCategoryPayload' is not null or undefined
            assertParamExists('categoryIdPut', 'updateCategoryPayload', updateCategoryPayload)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('categoryIdPut', 'id', id)
            const localVarPath = `/category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCategoryPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new category
         * @param {CreateCategoryPayload} createCategoryPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryPost: async (createCategoryPayload: CreateCategoryPayload, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCategoryPayload' is not null or undefined
            assertParamExists('categoryPost', 'createCategoryPayload', createCategoryPayload)
            const localVarPath = `/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCategoryPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoryApi - functional programming interface
 */
export const CategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create multiple categories in bulk
         * @param {CreateCategoriesBulkPayload} createCategoriesBulkPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoryBulkPost(createCategoriesBulkPayload: CreateCategoriesBulkPayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Category>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoryBulkPost(createCategoriesBulkPayload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.categoryBulkPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all categories, with optional filters
         * @param {string} [parentId] Filter categories by their parent ID.
         * @param {CategoryGetTypeEnum} [type] Filter categories by their type.
         * @param {string} [name] Filter categories by name (case-insensitive search).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoryGet(parentId?: string, type?: CategoryGetTypeEnum, name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Category>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoryGet(parentId, type, name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.categoryGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a category
         * @param {string} id The ID of the category to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoryIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoryIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.categoryIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a category by its ID
         * @param {string} id The ID of the category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoryIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoryIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.categoryIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a category
         * @param {UpdateCategoryPayload} updateCategoryPayload 
         * @param {string} id The ID of the category to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoryIdPut(updateCategoryPayload: UpdateCategoryPayload, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoryIdPut(updateCategoryPayload, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.categoryIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new category
         * @param {CreateCategoryPayload} createCategoryPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoryPost(createCategoryPayload: CreateCategoryPayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoryPost(createCategoryPayload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.categoryPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CategoryApi - factory interface
 */
export const CategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoryApiFp(configuration)
    return {
        /**
         * 
         * @summary Create multiple categories in bulk
         * @param {CreateCategoriesBulkPayload} createCategoriesBulkPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryBulkPost(createCategoriesBulkPayload: CreateCategoriesBulkPayload, options?: RawAxiosRequestConfig): AxiosPromise<Array<Category>> {
            return localVarFp.categoryBulkPost(createCategoriesBulkPayload, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all categories, with optional filters
         * @param {string} [parentId] Filter categories by their parent ID.
         * @param {CategoryGetTypeEnum} [type] Filter categories by their type.
         * @param {string} [name] Filter categories by name (case-insensitive search).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryGet(parentId?: string, type?: CategoryGetTypeEnum, name?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Category>> {
            return localVarFp.categoryGet(parentId, type, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a category
         * @param {string} id The ID of the category to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.categoryIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a category by its ID
         * @param {string} id The ID of the category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Category> {
            return localVarFp.categoryIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a category
         * @param {UpdateCategoryPayload} updateCategoryPayload 
         * @param {string} id The ID of the category to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryIdPut(updateCategoryPayload: UpdateCategoryPayload, id: string, options?: RawAxiosRequestConfig): AxiosPromise<Category> {
            return localVarFp.categoryIdPut(updateCategoryPayload, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new category
         * @param {CreateCategoryPayload} createCategoryPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryPost(createCategoryPayload: CreateCategoryPayload, options?: RawAxiosRequestConfig): AxiosPromise<Category> {
            return localVarFp.categoryPost(createCategoryPayload, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoryApi - object-oriented interface
 */
export class CategoryApi extends BaseAPI {
    /**
     * 
     * @summary Create multiple categories in bulk
     * @param {CreateCategoriesBulkPayload} createCategoriesBulkPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public categoryBulkPost(createCategoriesBulkPayload: CreateCategoriesBulkPayload, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).categoryBulkPost(createCategoriesBulkPayload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all categories, with optional filters
     * @param {string} [parentId] Filter categories by their parent ID.
     * @param {CategoryGetTypeEnum} [type] Filter categories by their type.
     * @param {string} [name] Filter categories by name (case-insensitive search).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public categoryGet(parentId?: string, type?: CategoryGetTypeEnum, name?: string, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).categoryGet(parentId, type, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a category
     * @param {string} id The ID of the category to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public categoryIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).categoryIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a category by its ID
     * @param {string} id The ID of the category.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public categoryIdGet(id: string, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).categoryIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a category
     * @param {UpdateCategoryPayload} updateCategoryPayload 
     * @param {string} id The ID of the category to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public categoryIdPut(updateCategoryPayload: UpdateCategoryPayload, id: string, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).categoryIdPut(updateCategoryPayload, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new category
     * @param {CreateCategoryPayload} createCategoryPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public categoryPost(createCategoryPayload: CreateCategoryPayload, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).categoryPost(createCategoryPayload, options).then((request) => request(this.axios, this.basePath));
    }
}

export const CategoryGetTypeEnum = {
    Top: 'top',
    Sub: 'sub'
} as const;
export type CategoryGetTypeEnum = typeof CategoryGetTypeEnum[keyof typeof CategoryGetTypeEnum];
