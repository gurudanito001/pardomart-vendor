/* tslint:disable */
/* eslint-disable */
/**
 * PardoMart Node API
 * API documentation for the PardoMart Node.js application.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pardomart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateTagPayload } from '../models';
// @ts-ignore
import type { CreateTagsBulkPayload } from '../models';
// @ts-ignore
import type { Tag } from '../models';
// @ts-ignore
import type { UpdateTagPayload } from '../models';
/**
 * TagApi - axios parameter creator
 */
export const TagApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create multiple tags in bulk
         * @param {CreateTagsBulkPayload} createTagsBulkPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsBulkPost: async (createTagsBulkPayload: CreateTagsBulkPayload, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTagsBulkPayload' is not null or undefined
            assertParamExists('tagsBulkPost', 'createTagsBulkPayload', createTagsBulkPayload)
            const localVarPath = `/tags/bulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTagsBulkPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all tags, with optional filtering by name
         * @param {string} [name] Filter tags by name (case-insensitive search).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsGet: async (name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a tag
         * @param {string} id The ID of the tag to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tagsIdDelete', 'id', id)
            const localVarPath = `/tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a tag by its ID
         * @param {string} id The ID of the tag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tagsIdGet', 'id', id)
            const localVarPath = `/tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a tag\'s name
         * @param {UpdateTagPayload} updateTagPayload 
         * @param {string} id The ID of the tag to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdPatch: async (updateTagPayload: UpdateTagPayload, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateTagPayload' is not null or undefined
            assertParamExists('tagsIdPatch', 'updateTagPayload', updateTagPayload)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tagsIdPatch', 'id', id)
            const localVarPath = `/tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTagPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new tag
         * @param {CreateTagPayload} createTagPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsPost: async (createTagPayload: CreateTagPayload, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTagPayload' is not null or undefined
            assertParamExists('tagsPost', 'createTagPayload', createTagPayload)
            const localVarPath = `/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTagPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TagApi - functional programming interface
 */
export const TagApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TagApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create multiple tags in bulk
         * @param {CreateTagsBulkPayload} createTagsBulkPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tagsBulkPost(createTagsBulkPayload: CreateTagsBulkPayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tag>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tagsBulkPost(createTagsBulkPayload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TagApi.tagsBulkPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all tags, with optional filtering by name
         * @param {string} [name] Filter tags by name (case-insensitive search).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tagsGet(name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tag>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tagsGet(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TagApi.tagsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a tag
         * @param {string} id The ID of the tag to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tagsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tagsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TagApi.tagsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a tag by its ID
         * @param {string} id The ID of the tag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tagsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tagsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TagApi.tagsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a tag\'s name
         * @param {UpdateTagPayload} updateTagPayload 
         * @param {string} id The ID of the tag to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tagsIdPatch(updateTagPayload: UpdateTagPayload, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tagsIdPatch(updateTagPayload, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TagApi.tagsIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new tag
         * @param {CreateTagPayload} createTagPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tagsPost(createTagPayload: CreateTagPayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tagsPost(createTagPayload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TagApi.tagsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TagApi - factory interface
 */
export const TagApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TagApiFp(configuration)
    return {
        /**
         * 
         * @summary Create multiple tags in bulk
         * @param {CreateTagsBulkPayload} createTagsBulkPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsBulkPost(createTagsBulkPayload: CreateTagsBulkPayload, options?: RawAxiosRequestConfig): AxiosPromise<Array<Tag>> {
            return localVarFp.tagsBulkPost(createTagsBulkPayload, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all tags, with optional filtering by name
         * @param {string} [name] Filter tags by name (case-insensitive search).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsGet(name?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Tag>> {
            return localVarFp.tagsGet(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a tag
         * @param {string} id The ID of the tag to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Tag> {
            return localVarFp.tagsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a tag by its ID
         * @param {string} id The ID of the tag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Tag> {
            return localVarFp.tagsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a tag\'s name
         * @param {UpdateTagPayload} updateTagPayload 
         * @param {string} id The ID of the tag to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdPatch(updateTagPayload: UpdateTagPayload, id: string, options?: RawAxiosRequestConfig): AxiosPromise<Tag> {
            return localVarFp.tagsIdPatch(updateTagPayload, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new tag
         * @param {CreateTagPayload} createTagPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsPost(createTagPayload: CreateTagPayload, options?: RawAxiosRequestConfig): AxiosPromise<Tag> {
            return localVarFp.tagsPost(createTagPayload, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TagApi - object-oriented interface
 */
export class TagApi extends BaseAPI {
    /**
     * 
     * @summary Create multiple tags in bulk
     * @param {CreateTagsBulkPayload} createTagsBulkPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public tagsBulkPost(createTagsBulkPayload: CreateTagsBulkPayload, options?: RawAxiosRequestConfig) {
        return TagApiFp(this.configuration).tagsBulkPost(createTagsBulkPayload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all tags, with optional filtering by name
     * @param {string} [name] Filter tags by name (case-insensitive search).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public tagsGet(name?: string, options?: RawAxiosRequestConfig) {
        return TagApiFp(this.configuration).tagsGet(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a tag
     * @param {string} id The ID of the tag to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public tagsIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return TagApiFp(this.configuration).tagsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a tag by its ID
     * @param {string} id The ID of the tag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public tagsIdGet(id: string, options?: RawAxiosRequestConfig) {
        return TagApiFp(this.configuration).tagsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a tag\'s name
     * @param {UpdateTagPayload} updateTagPayload 
     * @param {string} id The ID of the tag to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public tagsIdPatch(updateTagPayload: UpdateTagPayload, id: string, options?: RawAxiosRequestConfig) {
        return TagApiFp(this.configuration).tagsIdPatch(updateTagPayload, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new tag
     * @param {CreateTagPayload} createTagPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public tagsPost(createTagPayload: CreateTagPayload, options?: RawAxiosRequestConfig) {
        return TagApiFp(this.configuration).tagsPost(createTagPayload, options).then((request) => request(this.axios, this.basePath));
    }
}

