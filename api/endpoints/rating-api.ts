/* tslint:disable */
/* eslint-disable */
/**
 * PardoMart Node API
 * API documentation for the PardoMart Node.js application.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pardomart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateRatingPayload } from '../models';
// @ts-ignore
import type { Rating } from '../models';
// @ts-ignore
import type { RatingType } from '../models';
// @ts-ignore
import type { RatingWithRelations } from '../models';
// @ts-ignore
import type { RatingsAggregateGet200Response } from '../models';
// @ts-ignore
import type { UpdateRatingPayload } from '../models';
/**
 * RatingApi - axios parameter creator
 */
export const RatingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Calculates the average rating and total count of ratings for a specific vendor, shopper, or deliverer.
         * @summary Get aggregate rating for a vendor or user
         * @param {string} [ratedVendorId] The ID of the vendor to get aggregate ratings for.
         * @param {string} [ratedUserId] The ID of the user (shopper/deliverer) to get aggregate ratings for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratingsAggregateGet: async (ratedVendorId?: string, ratedUserId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ratings/aggregate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ratedVendorId !== undefined) {
                localVarQueryParameter['ratedVendorId'] = ratedVendorId;
            }

            if (ratedUserId !== undefined) {
                localVarQueryParameter['ratedUserId'] = ratedUserId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of ratings, with optional filters.
         * @summary Get a list of ratings
         * @param {string} [orderId] Filter ratings by a specific order ID.
         * @param {string} [raterId] Filter ratings by the user who submitted them.
         * @param {string} [ratedVendorId] Filter ratings for a specific vendor.
         * @param {string} [ratedUserId] Filter ratings for a specific user (shopper or deliverer).
         * @param {RatingType} [type] Filter by the type of rating.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratingsGet: async (orderId?: string, raterId?: string, ratedVendorId?: string, ratedUserId?: string, type?: RatingType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ratings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderId !== undefined) {
                localVarQueryParameter['orderId'] = orderId;
            }

            if (raterId !== undefined) {
                localVarQueryParameter['raterId'] = raterId;
            }

            if (ratedVendorId !== undefined) {
                localVarQueryParameter['ratedVendorId'] = ratedVendorId;
            }

            if (ratedUserId !== undefined) {
                localVarQueryParameter['ratedUserId'] = ratedUserId;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows a customer to delete their own rating.
         * @summary Delete a rating
         * @param {string} id The ID of the rating to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratingsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ratingsIdDelete', 'id', id)
            const localVarPath = `/ratings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a single rating by ID
         * @param {string} id The ID of the rating to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratingsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ratingsIdGet', 'id', id)
            const localVarPath = `/ratings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows a customer to update their own rating for an order.
         * @summary Update a rating
         * @param {UpdateRatingPayload} updateRatingPayload 
         * @param {string} id The ID of the rating to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratingsIdPatch: async (updateRatingPayload: UpdateRatingPayload, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateRatingPayload' is not null or undefined
            assertParamExists('ratingsIdPatch', 'updateRatingPayload', updateRatingPayload)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ratingsIdPatch', 'id', id)
            const localVarPath = `/ratings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateRatingPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows a customer to submit a rating for a completed order. The rating can be for a VENDOR, SHOPPER, or DELIVERER. A user can only submit one rating of each type per order.
         * @summary Create a new rating for an order
         * @param {CreateRatingPayload} createRatingPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratingsPost: async (createRatingPayload: CreateRatingPayload, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createRatingPayload' is not null or undefined
            assertParamExists('ratingsPost', 'createRatingPayload', createRatingPayload)
            const localVarPath = `/ratings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRatingPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RatingApi - functional programming interface
 */
export const RatingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RatingApiAxiosParamCreator(configuration)
    return {
        /**
         * Calculates the average rating and total count of ratings for a specific vendor, shopper, or deliverer.
         * @summary Get aggregate rating for a vendor or user
         * @param {string} [ratedVendorId] The ID of the vendor to get aggregate ratings for.
         * @param {string} [ratedUserId] The ID of the user (shopper/deliverer) to get aggregate ratings for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ratingsAggregateGet(ratedVendorId?: string, ratedUserId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RatingsAggregateGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ratingsAggregateGet(ratedVendorId, ratedUserId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RatingApi.ratingsAggregateGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of ratings, with optional filters.
         * @summary Get a list of ratings
         * @param {string} [orderId] Filter ratings by a specific order ID.
         * @param {string} [raterId] Filter ratings by the user who submitted them.
         * @param {string} [ratedVendorId] Filter ratings for a specific vendor.
         * @param {string} [ratedUserId] Filter ratings for a specific user (shopper or deliverer).
         * @param {RatingType} [type] Filter by the type of rating.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ratingsGet(orderId?: string, raterId?: string, ratedVendorId?: string, ratedUserId?: string, type?: RatingType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RatingWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ratingsGet(orderId, raterId, ratedVendorId, ratedUserId, type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RatingApi.ratingsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Allows a customer to delete their own rating.
         * @summary Delete a rating
         * @param {string} id The ID of the rating to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ratingsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rating>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ratingsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RatingApi.ratingsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a single rating by ID
         * @param {string} id The ID of the rating to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ratingsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rating>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ratingsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RatingApi.ratingsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Allows a customer to update their own rating for an order.
         * @summary Update a rating
         * @param {UpdateRatingPayload} updateRatingPayload 
         * @param {string} id The ID of the rating to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ratingsIdPatch(updateRatingPayload: UpdateRatingPayload, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rating>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ratingsIdPatch(updateRatingPayload, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RatingApi.ratingsIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Allows a customer to submit a rating for a completed order. The rating can be for a VENDOR, SHOPPER, or DELIVERER. A user can only submit one rating of each type per order.
         * @summary Create a new rating for an order
         * @param {CreateRatingPayload} createRatingPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ratingsPost(createRatingPayload: CreateRatingPayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rating>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ratingsPost(createRatingPayload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RatingApi.ratingsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RatingApi - factory interface
 */
export const RatingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RatingApiFp(configuration)
    return {
        /**
         * Calculates the average rating and total count of ratings for a specific vendor, shopper, or deliverer.
         * @summary Get aggregate rating for a vendor or user
         * @param {string} [ratedVendorId] The ID of the vendor to get aggregate ratings for.
         * @param {string} [ratedUserId] The ID of the user (shopper/deliverer) to get aggregate ratings for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratingsAggregateGet(ratedVendorId?: string, ratedUserId?: string, options?: RawAxiosRequestConfig): AxiosPromise<RatingsAggregateGet200Response> {
            return localVarFp.ratingsAggregateGet(ratedVendorId, ratedUserId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of ratings, with optional filters.
         * @summary Get a list of ratings
         * @param {string} [orderId] Filter ratings by a specific order ID.
         * @param {string} [raterId] Filter ratings by the user who submitted them.
         * @param {string} [ratedVendorId] Filter ratings for a specific vendor.
         * @param {string} [ratedUserId] Filter ratings for a specific user (shopper or deliverer).
         * @param {RatingType} [type] Filter by the type of rating.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratingsGet(orderId?: string, raterId?: string, ratedVendorId?: string, ratedUserId?: string, type?: RatingType, options?: RawAxiosRequestConfig): AxiosPromise<Array<RatingWithRelations>> {
            return localVarFp.ratingsGet(orderId, raterId, ratedVendorId, ratedUserId, type, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows a customer to delete their own rating.
         * @summary Delete a rating
         * @param {string} id The ID of the rating to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratingsIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Rating> {
            return localVarFp.ratingsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a single rating by ID
         * @param {string} id The ID of the rating to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratingsIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Rating> {
            return localVarFp.ratingsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows a customer to update their own rating for an order.
         * @summary Update a rating
         * @param {UpdateRatingPayload} updateRatingPayload 
         * @param {string} id The ID of the rating to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratingsIdPatch(updateRatingPayload: UpdateRatingPayload, id: string, options?: RawAxiosRequestConfig): AxiosPromise<Rating> {
            return localVarFp.ratingsIdPatch(updateRatingPayload, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows a customer to submit a rating for a completed order. The rating can be for a VENDOR, SHOPPER, or DELIVERER. A user can only submit one rating of each type per order.
         * @summary Create a new rating for an order
         * @param {CreateRatingPayload} createRatingPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratingsPost(createRatingPayload: CreateRatingPayload, options?: RawAxiosRequestConfig): AxiosPromise<Rating> {
            return localVarFp.ratingsPost(createRatingPayload, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RatingApi - object-oriented interface
 */
export class RatingApi extends BaseAPI {
    /**
     * Calculates the average rating and total count of ratings for a specific vendor, shopper, or deliverer.
     * @summary Get aggregate rating for a vendor or user
     * @param {string} [ratedVendorId] The ID of the vendor to get aggregate ratings for.
     * @param {string} [ratedUserId] The ID of the user (shopper/deliverer) to get aggregate ratings for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public ratingsAggregateGet(ratedVendorId?: string, ratedUserId?: string, options?: RawAxiosRequestConfig) {
        return RatingApiFp(this.configuration).ratingsAggregateGet(ratedVendorId, ratedUserId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of ratings, with optional filters.
     * @summary Get a list of ratings
     * @param {string} [orderId] Filter ratings by a specific order ID.
     * @param {string} [raterId] Filter ratings by the user who submitted them.
     * @param {string} [ratedVendorId] Filter ratings for a specific vendor.
     * @param {string} [ratedUserId] Filter ratings for a specific user (shopper or deliverer).
     * @param {RatingType} [type] Filter by the type of rating.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public ratingsGet(orderId?: string, raterId?: string, ratedVendorId?: string, ratedUserId?: string, type?: RatingType, options?: RawAxiosRequestConfig) {
        return RatingApiFp(this.configuration).ratingsGet(orderId, raterId, ratedVendorId, ratedUserId, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows a customer to delete their own rating.
     * @summary Delete a rating
     * @param {string} id The ID of the rating to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public ratingsIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return RatingApiFp(this.configuration).ratingsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a single rating by ID
     * @param {string} id The ID of the rating to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public ratingsIdGet(id: string, options?: RawAxiosRequestConfig) {
        return RatingApiFp(this.configuration).ratingsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows a customer to update their own rating for an order.
     * @summary Update a rating
     * @param {UpdateRatingPayload} updateRatingPayload 
     * @param {string} id The ID of the rating to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public ratingsIdPatch(updateRatingPayload: UpdateRatingPayload, id: string, options?: RawAxiosRequestConfig) {
        return RatingApiFp(this.configuration).ratingsIdPatch(updateRatingPayload, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows a customer to submit a rating for a completed order. The rating can be for a VENDOR, SHOPPER, or DELIVERER. A user can only submit one rating of each type per order.
     * @summary Create a new rating for an order
     * @param {CreateRatingPayload} createRatingPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public ratingsPost(createRatingPayload: CreateRatingPayload, options?: RawAxiosRequestConfig) {
        return RatingApiFp(this.configuration).ratingsPost(createRatingPayload, options).then((request) => request(this.axios, this.basePath));
    }
}

