/* tslint:disable */
/* eslint-disable */
/**
 * PardoMart Node API
 * API documentation for the PardoMart Node.js application.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pardomart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Device } from '../models';
// @ts-ignore
import type { DevicesPostRequest } from '../models';
// @ts-ignore
import type { Notification } from '../models';
// @ts-ignore
import type { NotificationsReadAllPatch200Response } from '../models';
// @ts-ignore
import type { PaginatedNotifications } from '../models';
/**
 * NotificationApi - axios parameter creator
 */
export const NotificationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Unregister a device for push notifications
         * @param {string} fcmToken The FCM token of the device to unregister.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesFcmTokenDelete: async (fcmToken: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fcmToken' is not null or undefined
            assertParamExists('devicesFcmTokenDelete', 'fcmToken', fcmToken)
            const localVarPath = `/devices/{fcmToken}`
                .replace(`{${"fcmToken"}}`, encodeURIComponent(String(fcmToken)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register a device for push notifications
         * @param {DevicesPostRequest} devicesPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesPost: async (devicesPostRequest: DevicesPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'devicesPostRequest' is not null or undefined
            assertParamExists('devicesPost', 'devicesPostRequest', devicesPostRequest)
            const localVarPath = `/devices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(devicesPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get notifications for the authenticated user
         * @param {number} [page] Page number for pagination.
         * @param {number} [size] Number of items per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsGet: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Mark a specific notification as read
         * @param {string} notificationId The ID of the notification to mark as read.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsNotificationIdReadPatch: async (notificationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'notificationId' is not null or undefined
            assertParamExists('notificationsNotificationIdReadPatch', 'notificationId', notificationId)
            const localVarPath = `/notifications/{notificationId}/read`
                .replace(`{${"notificationId"}}`, encodeURIComponent(String(notificationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Mark all unread notifications as read
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsReadAllPatch: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notifications/read-all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the count of unread notifications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsUnreadCountGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notifications/unread-count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationApi - functional programming interface
 */
export const NotificationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Unregister a device for push notifications
         * @param {string} fcmToken The FCM token of the device to unregister.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesFcmTokenDelete(fcmToken: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesFcmTokenDelete(fcmToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationApi.devicesFcmTokenDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Register a device for push notifications
         * @param {DevicesPostRequest} devicesPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesPost(devicesPostRequest: DevicesPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Device>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesPost(devicesPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationApi.devicesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get notifications for the authenticated user
         * @param {number} [page] Page number for pagination.
         * @param {number} [size] Number of items per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationsGet(page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedNotifications>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationsGet(page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationApi.notificationsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Mark a specific notification as read
         * @param {string} notificationId The ID of the notification to mark as read.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationsNotificationIdReadPatch(notificationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationsNotificationIdReadPatch(notificationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationApi.notificationsNotificationIdReadPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Mark all unread notifications as read
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationsReadAllPatch(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationsReadAllPatch200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationsReadAllPatch(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationApi.notificationsReadAllPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get the count of unread notifications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationsUnreadCountGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationsReadAllPatch200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationsUnreadCountGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationApi.notificationsUnreadCountGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NotificationApi - factory interface
 */
export const NotificationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationApiFp(configuration)
    return {
        /**
         * 
         * @summary Unregister a device for push notifications
         * @param {string} fcmToken The FCM token of the device to unregister.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesFcmTokenDelete(fcmToken: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.devicesFcmTokenDelete(fcmToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register a device for push notifications
         * @param {DevicesPostRequest} devicesPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesPost(devicesPostRequest: DevicesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Device> {
            return localVarFp.devicesPost(devicesPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get notifications for the authenticated user
         * @param {number} [page] Page number for pagination.
         * @param {number} [size] Number of items per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsGet(page?: number, size?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedNotifications> {
            return localVarFp.notificationsGet(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Mark a specific notification as read
         * @param {string} notificationId The ID of the notification to mark as read.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsNotificationIdReadPatch(notificationId: string, options?: RawAxiosRequestConfig): AxiosPromise<Notification> {
            return localVarFp.notificationsNotificationIdReadPatch(notificationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Mark all unread notifications as read
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsReadAllPatch(options?: RawAxiosRequestConfig): AxiosPromise<NotificationsReadAllPatch200Response> {
            return localVarFp.notificationsReadAllPatch(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the count of unread notifications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsUnreadCountGet(options?: RawAxiosRequestConfig): AxiosPromise<NotificationsReadAllPatch200Response> {
            return localVarFp.notificationsUnreadCountGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationApi - object-oriented interface
 */
export class NotificationApi extends BaseAPI {
    /**
     * 
     * @summary Unregister a device for push notifications
     * @param {string} fcmToken The FCM token of the device to unregister.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public devicesFcmTokenDelete(fcmToken: string, options?: RawAxiosRequestConfig) {
        return NotificationApiFp(this.configuration).devicesFcmTokenDelete(fcmToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register a device for push notifications
     * @param {DevicesPostRequest} devicesPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public devicesPost(devicesPostRequest: DevicesPostRequest, options?: RawAxiosRequestConfig) {
        return NotificationApiFp(this.configuration).devicesPost(devicesPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get notifications for the authenticated user
     * @param {number} [page] Page number for pagination.
     * @param {number} [size] Number of items per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public notificationsGet(page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return NotificationApiFp(this.configuration).notificationsGet(page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Mark a specific notification as read
     * @param {string} notificationId The ID of the notification to mark as read.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public notificationsNotificationIdReadPatch(notificationId: string, options?: RawAxiosRequestConfig) {
        return NotificationApiFp(this.configuration).notificationsNotificationIdReadPatch(notificationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Mark all unread notifications as read
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public notificationsReadAllPatch(options?: RawAxiosRequestConfig) {
        return NotificationApiFp(this.configuration).notificationsReadAllPatch(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the count of unread notifications
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public notificationsUnreadCountGet(options?: RawAxiosRequestConfig) {
        return NotificationApiFp(this.configuration).notificationsUnreadCountGet(options).then((request) => request(this.axios, this.basePath));
    }
}

