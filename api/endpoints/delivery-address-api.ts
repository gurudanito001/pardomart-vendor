/* tslint:disable */
/* eslint-disable */
/**
 * PardoMart Node API
 * API documentation for the PardoMart Node.js application.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pardomart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateDeliveryAddressPayload } from '../models';
// @ts-ignore
import type { DeliveryAddress } from '../models';
// @ts-ignore
import type { UpdateDeliveryAddressPayload } from '../models';
/**
 * DeliveryAddressApi - axios parameter creator
 */
export const DeliveryAddressApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete a delivery address by its ID
         * @param {string} id The ID of the delivery address to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryAddressIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deliveryAddressIdDelete', 'id', id)
            const localVarPath = `/deliveryAddress/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a specific delivery address by its ID
         * @param {string} id The ID of the delivery address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryAddressIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deliveryAddressIdGet', 'id', id)
            const localVarPath = `/deliveryAddress/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a delivery address
         * @param {UpdateDeliveryAddressPayload} updateDeliveryAddressPayload 
         * @param {string} id The ID of the delivery address to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryAddressIdPut: async (updateDeliveryAddressPayload: UpdateDeliveryAddressPayload, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateDeliveryAddressPayload' is not null or undefined
            assertParamExists('deliveryAddressIdPut', 'updateDeliveryAddressPayload', updateDeliveryAddressPayload)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deliveryAddressIdPut', 'id', id)
            const localVarPath = `/deliveryAddress/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateDeliveryAddressPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set a delivery address as the default for the authenticated user
         * @param {string} id The ID of the delivery address to set as default.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryAddressIdSetDefaultPatch: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deliveryAddressIdSetDefaultPatch', 'id', id)
            const localVarPath = `/deliveryAddress/{id}/set-default`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the default delivery address for the authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryAddressMeDefaultGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/deliveryAddress/me/default`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all delivery addresses for the authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryAddressMeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/deliveryAddress/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new delivery address for the authenticated user
         * @param {CreateDeliveryAddressPayload} createDeliveryAddressPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryAddressPost: async (createDeliveryAddressPayload: CreateDeliveryAddressPayload, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createDeliveryAddressPayload' is not null or undefined
            assertParamExists('deliveryAddressPost', 'createDeliveryAddressPayload', createDeliveryAddressPayload)
            const localVarPath = `/deliveryAddress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createDeliveryAddressPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeliveryAddressApi - functional programming interface
 */
export const DeliveryAddressApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeliveryAddressApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete a delivery address by its ID
         * @param {string} id The ID of the delivery address to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deliveryAddressIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeliveryAddress>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deliveryAddressIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DeliveryAddressApi.deliveryAddressIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a specific delivery address by its ID
         * @param {string} id The ID of the delivery address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deliveryAddressIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeliveryAddress>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deliveryAddressIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DeliveryAddressApi.deliveryAddressIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a delivery address
         * @param {UpdateDeliveryAddressPayload} updateDeliveryAddressPayload 
         * @param {string} id The ID of the delivery address to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deliveryAddressIdPut(updateDeliveryAddressPayload: UpdateDeliveryAddressPayload, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeliveryAddress>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deliveryAddressIdPut(updateDeliveryAddressPayload, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DeliveryAddressApi.deliveryAddressIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Set a delivery address as the default for the authenticated user
         * @param {string} id The ID of the delivery address to set as default.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deliveryAddressIdSetDefaultPatch(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeliveryAddress>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deliveryAddressIdSetDefaultPatch(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DeliveryAddressApi.deliveryAddressIdSetDefaultPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get the default delivery address for the authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deliveryAddressMeDefaultGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeliveryAddress>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deliveryAddressMeDefaultGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DeliveryAddressApi.deliveryAddressMeDefaultGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all delivery addresses for the authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deliveryAddressMeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeliveryAddress>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deliveryAddressMeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DeliveryAddressApi.deliveryAddressMeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new delivery address for the authenticated user
         * @param {CreateDeliveryAddressPayload} createDeliveryAddressPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deliveryAddressPost(createDeliveryAddressPayload: CreateDeliveryAddressPayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeliveryAddress>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deliveryAddressPost(createDeliveryAddressPayload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DeliveryAddressApi.deliveryAddressPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DeliveryAddressApi - factory interface
 */
export const DeliveryAddressApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeliveryAddressApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete a delivery address by its ID
         * @param {string} id The ID of the delivery address to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryAddressIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<DeliveryAddress> {
            return localVarFp.deliveryAddressIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a specific delivery address by its ID
         * @param {string} id The ID of the delivery address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryAddressIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<DeliveryAddress> {
            return localVarFp.deliveryAddressIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a delivery address
         * @param {UpdateDeliveryAddressPayload} updateDeliveryAddressPayload 
         * @param {string} id The ID of the delivery address to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryAddressIdPut(updateDeliveryAddressPayload: UpdateDeliveryAddressPayload, id: string, options?: RawAxiosRequestConfig): AxiosPromise<DeliveryAddress> {
            return localVarFp.deliveryAddressIdPut(updateDeliveryAddressPayload, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set a delivery address as the default for the authenticated user
         * @param {string} id The ID of the delivery address to set as default.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryAddressIdSetDefaultPatch(id: string, options?: RawAxiosRequestConfig): AxiosPromise<DeliveryAddress> {
            return localVarFp.deliveryAddressIdSetDefaultPatch(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the default delivery address for the authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryAddressMeDefaultGet(options?: RawAxiosRequestConfig): AxiosPromise<DeliveryAddress> {
            return localVarFp.deliveryAddressMeDefaultGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all delivery addresses for the authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryAddressMeGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<DeliveryAddress>> {
            return localVarFp.deliveryAddressMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new delivery address for the authenticated user
         * @param {CreateDeliveryAddressPayload} createDeliveryAddressPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryAddressPost(createDeliveryAddressPayload: CreateDeliveryAddressPayload, options?: RawAxiosRequestConfig): AxiosPromise<DeliveryAddress> {
            return localVarFp.deliveryAddressPost(createDeliveryAddressPayload, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeliveryAddressApi - object-oriented interface
 */
export class DeliveryAddressApi extends BaseAPI {
    /**
     * 
     * @summary Delete a delivery address by its ID
     * @param {string} id The ID of the delivery address to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deliveryAddressIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return DeliveryAddressApiFp(this.configuration).deliveryAddressIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a specific delivery address by its ID
     * @param {string} id The ID of the delivery address.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deliveryAddressIdGet(id: string, options?: RawAxiosRequestConfig) {
        return DeliveryAddressApiFp(this.configuration).deliveryAddressIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a delivery address
     * @param {UpdateDeliveryAddressPayload} updateDeliveryAddressPayload 
     * @param {string} id The ID of the delivery address to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deliveryAddressIdPut(updateDeliveryAddressPayload: UpdateDeliveryAddressPayload, id: string, options?: RawAxiosRequestConfig) {
        return DeliveryAddressApiFp(this.configuration).deliveryAddressIdPut(updateDeliveryAddressPayload, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set a delivery address as the default for the authenticated user
     * @param {string} id The ID of the delivery address to set as default.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deliveryAddressIdSetDefaultPatch(id: string, options?: RawAxiosRequestConfig) {
        return DeliveryAddressApiFp(this.configuration).deliveryAddressIdSetDefaultPatch(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the default delivery address for the authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deliveryAddressMeDefaultGet(options?: RawAxiosRequestConfig) {
        return DeliveryAddressApiFp(this.configuration).deliveryAddressMeDefaultGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all delivery addresses for the authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deliveryAddressMeGet(options?: RawAxiosRequestConfig) {
        return DeliveryAddressApiFp(this.configuration).deliveryAddressMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new delivery address for the authenticated user
     * @param {CreateDeliveryAddressPayload} createDeliveryAddressPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deliveryAddressPost(createDeliveryAddressPayload: CreateDeliveryAddressPayload, options?: RawAxiosRequestConfig) {
        return DeliveryAddressApiFp(this.configuration).deliveryAddressPost(createDeliveryAddressPayload, options).then((request) => request(this.axios, this.basePath));
    }
}

