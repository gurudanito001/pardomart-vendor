/* tslint:disable */
/* eslint-disable */
/**
 * PardoMart Node API
 * API documentation for the PardoMart Node.js application.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pardomart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiV1OrderOrderIdMessagesPostRequest } from '../models';
// @ts-ignore
import type { ApiV1OrderOrderIdMessagesReadPatch200Response } from '../models';
// @ts-ignore
import type { MessageWithRelations } from '../models';
/**
 * MessagingApi - axios parameter creator
 */
export const MessagingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the conversation history for a specific order. The user must be a participant in the order (customer, shopper, or delivery person).
         * @summary Get messages for an order
         * @param {string} orderId The ID of the order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrderOrderIdMessagesGet: async (orderId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('apiV1OrderOrderIdMessagesGet', 'orderId', orderId)
            const localVarPath = `/api/v1/order/{orderId}/messages`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends a message from the authenticated user to another participant (customer, shopper, or delivery person) of the order.
         * @summary Send a message related to an order
         * @param {ApiV1OrderOrderIdMessagesPostRequest} apiV1OrderOrderIdMessagesPostRequest 
         * @param {string} orderId The ID of the order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrderOrderIdMessagesPost: async (apiV1OrderOrderIdMessagesPostRequest: ApiV1OrderOrderIdMessagesPostRequest, orderId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1OrderOrderIdMessagesPostRequest' is not null or undefined
            assertParamExists('apiV1OrderOrderIdMessagesPost', 'apiV1OrderOrderIdMessagesPostRequest', apiV1OrderOrderIdMessagesPostRequest)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('apiV1OrderOrderIdMessagesPost', 'orderId', orderId)
            const localVarPath = `/api/v1/order/{orderId}/messages`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1OrderOrderIdMessagesPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks all unread messages for the authenticated user within a specific order as read. This is typically called when the user opens the chat screen.
         * @summary Mark messages as read
         * @param {string} orderId The ID of the order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrderOrderIdMessagesReadPatch: async (orderId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('apiV1OrderOrderIdMessagesReadPatch', 'orderId', orderId)
            const localVarPath = `/api/v1/order/{orderId}/messages/read`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessagingApi - functional programming interface
 */
export const MessagingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MessagingApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the conversation history for a specific order. The user must be a participant in the order (customer, shopper, or delivery person).
         * @summary Get messages for an order
         * @param {string} orderId The ID of the order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrderOrderIdMessagesGet(orderId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MessageWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrderOrderIdMessagesGet(orderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MessagingApi.apiV1OrderOrderIdMessagesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Sends a message from the authenticated user to another participant (customer, shopper, or delivery person) of the order.
         * @summary Send a message related to an order
         * @param {ApiV1OrderOrderIdMessagesPostRequest} apiV1OrderOrderIdMessagesPostRequest 
         * @param {string} orderId The ID of the order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrderOrderIdMessagesPost(apiV1OrderOrderIdMessagesPostRequest: ApiV1OrderOrderIdMessagesPostRequest, orderId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrderOrderIdMessagesPost(apiV1OrderOrderIdMessagesPostRequest, orderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MessagingApi.apiV1OrderOrderIdMessagesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Marks all unread messages for the authenticated user within a specific order as read. This is typically called when the user opens the chat screen.
         * @summary Mark messages as read
         * @param {string} orderId The ID of the order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrderOrderIdMessagesReadPatch(orderId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1OrderOrderIdMessagesReadPatch200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrderOrderIdMessagesReadPatch(orderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MessagingApi.apiV1OrderOrderIdMessagesReadPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MessagingApi - factory interface
 */
export const MessagingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MessagingApiFp(configuration)
    return {
        /**
         * Retrieves the conversation history for a specific order. The user must be a participant in the order (customer, shopper, or delivery person).
         * @summary Get messages for an order
         * @param {string} orderId The ID of the order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrderOrderIdMessagesGet(orderId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<MessageWithRelations>> {
            return localVarFp.apiV1OrderOrderIdMessagesGet(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends a message from the authenticated user to another participant (customer, shopper, or delivery person) of the order.
         * @summary Send a message related to an order
         * @param {ApiV1OrderOrderIdMessagesPostRequest} apiV1OrderOrderIdMessagesPostRequest 
         * @param {string} orderId The ID of the order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrderOrderIdMessagesPost(apiV1OrderOrderIdMessagesPostRequest: ApiV1OrderOrderIdMessagesPostRequest, orderId: string, options?: RawAxiosRequestConfig): AxiosPromise<MessageWithRelations> {
            return localVarFp.apiV1OrderOrderIdMessagesPost(apiV1OrderOrderIdMessagesPostRequest, orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Marks all unread messages for the authenticated user within a specific order as read. This is typically called when the user opens the chat screen.
         * @summary Mark messages as read
         * @param {string} orderId The ID of the order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrderOrderIdMessagesReadPatch(orderId: string, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1OrderOrderIdMessagesReadPatch200Response> {
            return localVarFp.apiV1OrderOrderIdMessagesReadPatch(orderId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MessagingApi - object-oriented interface
 */
export class MessagingApi extends BaseAPI {
    /**
     * Retrieves the conversation history for a specific order. The user must be a participant in the order (customer, shopper, or delivery person).
     * @summary Get messages for an order
     * @param {string} orderId The ID of the order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1OrderOrderIdMessagesGet(orderId: string, options?: RawAxiosRequestConfig) {
        return MessagingApiFp(this.configuration).apiV1OrderOrderIdMessagesGet(orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends a message from the authenticated user to another participant (customer, shopper, or delivery person) of the order.
     * @summary Send a message related to an order
     * @param {ApiV1OrderOrderIdMessagesPostRequest} apiV1OrderOrderIdMessagesPostRequest 
     * @param {string} orderId The ID of the order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1OrderOrderIdMessagesPost(apiV1OrderOrderIdMessagesPostRequest: ApiV1OrderOrderIdMessagesPostRequest, orderId: string, options?: RawAxiosRequestConfig) {
        return MessagingApiFp(this.configuration).apiV1OrderOrderIdMessagesPost(apiV1OrderOrderIdMessagesPostRequest, orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Marks all unread messages for the authenticated user within a specific order as read. This is typically called when the user opens the chat screen.
     * @summary Mark messages as read
     * @param {string} orderId The ID of the order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1OrderOrderIdMessagesReadPatch(orderId: string, options?: RawAxiosRequestConfig) {
        return MessagingApiFp(this.configuration).apiV1OrderOrderIdMessagesReadPatch(orderId, options).then((request) => request(this.axios, this.basePath));
    }
}

